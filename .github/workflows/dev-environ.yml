name: dev-environ
on:
  push:
    branches:
      - dev
jobs: 
  create-exe-linux-and-upload-artifact:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.HUSH }}
      - shell: bash
        name: Create linux exe and add exe to PATH
        run: |
          pip install -U pyinstaller
          cd app
          rm __init__.py
          pyinstaller acm.py
          mkdir /home/runner/release
          # Copy compiled app elsewhere
          cp -R dist/acm/. /home/runner/release/
          cd ..
          # Delete everything except .git folder
          find -mindepth 1 \( -name .git -prune \) -o -type f -exec rm -rf {} +
          find -mindepth 1 \( -name .git -prune \) -o -type d -exec rm -rf {} +
          rm -rf .github
          # copy compiled app back in
          cp -R /home/runner/release/. .
          git config --global user.email "Agile.Cloud.Institute@GreenRiverIT.com"
          git config --global user.name "AgileCloudInstitute"
          git init
          git remote set-url origin "https://github.com/${GITHUB_REPOSITORY}.git"
          git branch -M test-exe-linux
          git add --all
          #git commit -am 'pushed from dev-environ'
          git push --force -u origin test-exe-linux
#          git config --global user.email "Agile.Cloud.Institute@GreenRiverIT.com"
#          git config --global user.name "AgileCloudInstitute"
#          git init
#          git remote set-url origin "https://github.com/${GITHUB_REPOSITORY}.git"
##          git branch -M test
#          git add --all
##          git push --force -u origin test
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO }}
          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
        run: | 
          echo "$ACM_SECRET" > /home/runner/acmconfig/keys.yaml
          echo "$ACM_SECOND" > /usr/acm/keys/adminAccounts/keys.yaml
      - name: Setup On
        shell: bash
        run: |
          PATH=$PATH:/home/runner/release;export PATH
          sudo mkdir /home/runner/testdir
          sudo chown runner:runner /home/runner/testdir
          cd /home/runner/testdir
          echo 'About to setup on'
          acm setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-terraform-packer.git
          echo "........................About to ls -al "
          ls -al 
#      - shell: bash
#        name: Run tfbackend serviceType on
#        run: |
#          PATH=$PATH:/home/runner/release;export PATH
#          cd /home/runner/testdir
#          acm serviceType on systemName=tfbackend serviceType=tfBackend
#      - shell: bash
#        name: Run tfbackend serviceType off
#        run: |
#          PATH=$PATH:/home/runner/release;export PATH
#          cd /home/runner/testdir
#          acm serviceType off systemName=tfbackend serviceType=tfBackend
#      - shell: bash
#        name: Run tfbackend serviceInstance on
#        run: |
#          PATH=$PATH:/home/runner/release;export PATH
#          cd /home/runner/testdir
#          acm serviceInstance on systemName=tfbackend serviceType=tfBackend serviceInstance=adminAccounts
#      - shell: bash
#        name: Run tfbackend serviceInstance off
#        run: |
#          PATH=$PATH:/home/runner/release;export PATH
#          cd /home/runner/testdir
#          acm serviceInstance off systemName=tfbackend serviceType=tfBackend serviceInstance=adminAccounts
#      - shell: bash
#        name: Run tfbackend services on
#        run: |
#          PATH=$PATH:/home/runner/release;export PATH
#          cd /home/runner/testdir
#          acm services on systemName=tfbackend
#      - shell: bash
#        name: Run admin foundation on
#        run: |
#          PATH=$PATH:/home/runner/release;export PATH
#          cd /home/runner/testdir
#          acm foundation on systemName=admin
#      - shell: bash
#        name: Run admin services on
#        run: |
#          PATH=$PATH:/home/runner/release;export PATH
#          cd /home/runner/testdir
#          acm services on systemName=admin
#      - shell: bash
#        name: Run agents foundation on
#        run: |
#          PATH=$PATH:/home/runner/release;export PATH
#          cd /home/runner/testdir
#          acm foundation on systemName=agents
#      - shell: bash
#        name: Run agents services on
#        run: |
#          PATH=$PATH:/home/runner/release;export PATH
#          cd /home/runner/testdir
#          acm services on systemName=agents
#      - shell: bash
#        name: Run agents services off
#        run: |
#          PATH=$PATH:/home/runner/release;export PATH
#          cd /home/runner/testdir
#          acm services off systemName=agents
#      - shell: bash
#        name: Run agents foundation off
#        run: |
#          PATH=$PATH:/home/runner/release;export PATH
#          cd /home/runner/testdir
#          acm foundation off systemName=agents
#      - shell: bash
#        name: Run admin services off
#        run: |
#          PATH=$PATH:/home/runner/release;export PATH
#          cd /home/runner/testdir
#          acm services off systemName=admin
#      - shell: bash
#        name: Run admin foundation off
#        run: |
#          PATH=$PATH:/home/runner/release;export PATH
#          cd /home/runner/testdir
#          acm foundation off systemName=admin
#      - shell: bash
#        name: Run tfbackend services off
#        run: |
#          PATH=$PATH:/home/runner/release;export PATH
#          cd /home/runner/testdir
#          acm services off systemName=tfbackend
#      - name: Setup Off
#        run: |
#          PATH=$PATH:/home/runner/release;export PATH
#          cd /home/runner/testdir
#          echo '........................About to setup off'
#          acm setup off
#          echo "........................About to ls -al"
#          ls -al
#      - shell: bash
#        name: Delete Secrets
#        run: |
#          rm /home/runner/acmconfig/keys.yaml

#...............................................................

#      - shell: bash
#        name: Create exe and add exe to PATH
#        env:
#          GIT_PAT: ${{ secrets.HUSH }}
#        run: |
#          echo "About to pwd"
#          pwd
#          echo "About to list directory contents of initial dir"
#          ls -al
#          #pip install -U pyinstaller
#          #cd app
#          #rm __init__.py
#          #pyinstaller acm.py
#          #echo "About to list directory contents of app"
#          #ls -al
#          mkdir /home/runner/release
#          cp -R dist/acm/. /home/runner/release/
#          cd /home/runner/release
#          echo "About to list directory contents of /home/runner/release"
#          ls -al
#          repoWithToken="https://"$GIT_PAT"@github.com/AgileCloudInstitute/AgileCloudManager.git"
#          git config --global user.email "Agile.Cloud.Institute@GreenRiverIT.com"
#          git config --global user.name "AgileCloudInstitute"
#          git init
#          git remote add origin $repoWithToken
#          git add --all
#          git commit -am 'pushed from test-environ'
#          git push --force -u origin HEAD:release-linux
#.........................................................
#  unit-tests-linux-misc:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - id: ConfigureUbuntuAgent
#        uses: ./.github/actions/ubuntu-provisioner
#      - name: Put secrets in file
#        shell: bash
#        env:
#          ACM_SECRET: ${{ secrets.ACM_REPO }}
#          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
#        run: | 
#          echo "$ACM_SECRET" > /home/runner/acmconfig/keys.yaml
#          echo "$ACM_SECOND" > /usr/acm/keys/adminAccounts/keys.yaml
#      - shell: bash
#        name: Run setup on
#        run: |
#          cd /home/runner/work/AgileCloudManager/
#          python AgileCloudManager/app/acm.py setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-cf.git
#      - shell: bash
#        name: Run test_command_builder
#        run: |
#          cd /home/runner/work/AgileCloudManager/
#          python -m unittest AgileCloudManager.unitTests.test_command_builder
#      - shell: bash
#        name: Run test_workflow_and_changes
#        run: |
#          cd /home/runner/work/AgileCloudManager/
#          python -m unittest AgileCloudManager.unitTests.test_workflow_and_changes
#      - shell: bash
#        name: Run test_controller_custom.py
#        run: |
#          cd /home/runner/work/AgileCloudManager/
#          python -m unittest AgileCloudManager.unitTests.test_controller_custom
#      - shell: bash
#        name: Delete Secrets
#        run: |
#          rm /home/runner/acmconfig/keys.yaml
#  unit-tests-linux-cloudformation:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - id: ConfigureUbuntuAgent
#        uses: ./.github/actions/ubuntu-provisioner
#      - name: Put secrets in file
#        shell: bash
#        env:
#          ACM_SECRET: ${{ secrets.ACM_REPO }}
#          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
#        run: | 
#          echo "$ACM_SECRET" > /home/runner/acmconfig/keys.yaml
#          echo "$ACM_SECOND" > /usr/acm/keys/adminAccounts/keys.yaml
#      - shell: bash
#        name: Run setup on
#        run: |
#          cd /home/runner/work/AgileCloudManager/
#          python AgileCloudManager/app/acm.py setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-cf.git
#      - shell: bash
#        name: Run test_controller_cf
#        run: |
#          cd /home/runner/work/AgileCloudManager/
#          python -m unittest AgileCloudManager.unitTests.test_controller_cf
#      - shell: bash
#        name: Delete Secrets
#        run: |
#          rm /home/runner/acmconfig/keys.yaml
#  unit-tests-linux-terraform-packer:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - id: ConfigureUbuntuAgent
#        uses: ./.github/actions/ubuntu-provisioner
#      - name: Put secrets in file
#        shell: bash
#        env:
#         ACM_SECRET: ${{ secrets.ACM_REPO }}
#         ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
#        run: | 
#          echo "$ACM_SECRET" > /home/runner/acmconfig/keys.yaml
#          echo "$ACM_SECOND" > /usr/acm/keys/adminAccounts/keys.yaml
#      - shell: bash
#        name: Run setup on
#        run: |
#          cd /home/runner/work/AgileCloudManager/
#          python AgileCloudManager/app/acm.py setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-cf.git
#      - shell: bash
#        name: Run test_controller_terraform_and_packer_one
#        run: |
#          cd /home/runner/work/AgileCloudManager/
#          python -m unittest AgileCloudManager.unitTests.test_controller_terraform_and_packer_one
#      - shell: bash
#        name: Run test_controller_terraform_and_packer_two
#        run: |
#          cd /home/runner/work/AgileCloudManager/
#          python -m unittest AgileCloudManager.unitTests.test_controller_terraform_and_packer_two
#      - shell: bash
#        name: Delete Secrets
#        run: |
#          rm /home/runner/acmconfig/keys.yaml
#  unit-tests-linux-arm-template:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - id: ConfigureUbuntuAgent
#        uses: ./.github/actions/ubuntu-provisioner
#      - name: Put secrets in file
#        shell: bash
#        env:
#          ACM_SECRET: ${{ secrets.ACM_REPO }}
#          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
#        run: | 
#          echo "$ACM_SECRET" > /home/runner/acmconfig/keys.yaml
#          echo "$ACM_SECOND" > /usr/acm/keys/adminAccounts/keys.yaml
#      - shell: bash
#        name: Run setup on
#        run: |
#          cd /home/runner/work/AgileCloudManager/
#          python AgileCloudManager/app/acm.py setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-cf.git
#      - shell: bash
#        name: Run test_controller_arm
#        run: |
#          cd /home/runner/work/AgileCloudManager/
#          python -m unittest AgileCloudManager.unitTests.test_controller_arm
#      - shell: bash
#        name: Delete Secrets
#        run: |
#          rm /home/runner/acmconfig/keys.yaml
#  unit-tests-windows-misc:
#    needs: [unit-tests-linux-misc, unit-tests-linux-cloudformation, unit-tests-linux-terraform-packer, unit-tests-linux-arm-template]
#    runs-on: windows-latest
#    steps:
#      - uses: actions/checkout@v3
#      - id: ConfigureWindowsAgent
#        uses: ./.github/actions/windows-provisioner
#      - shell: python
#        name: Save secrets to file
#        env:
#          ACM_SECRET: ${{ secrets.ACM_REPO }}
#          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
#        run: |
#          import base64, subprocess, sys, os, pathlib
#          #Import first secrets file
#          with open('C:\\Users\\runneradmin\\acmconfig\\keys.yaml', 'w') as key_file:
#            key_file.write(os.environ['ACM_SECRET'])
#          #Import second secrets file
#          with open('C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml', 'w') as key_file:
#            key_file.write(os.environ['ACM_SECOND'])
#      - shell: python
#        name: Run setup on
#        run: |
#          import subprocess
#          import os
#          os.chdir('D:\\a\\AgileCloudManager\\')
#          print('About to: acm setup on')
#          mycmd = "python AgileCloudManager\\app\\acm.py setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-cf.git"
#          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
#          while(True):
#            # returns None while subprocess is running
#            retcode = p.poll() 
#            line = p.stdout.readline()
#            print(line)
#            if retcode is not None:
#              break 
#      - shell: python
#        name: Run test_command_builder
#        run: |
#          import os, subprocess
#          os.chdir("..")
#          print(".................about to run unit test")
#          mycmd = "python -m unittest AgileCloudManager.unitTests.test_command_builder"
#          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
#          while(True):
#            # returns None while subprocess is running
#            retcode = p.poll() 
#            line = p.stdout.readline()
#            print(line)
#            if retcode is not None:
#              break 
#      - shell: python
#        name: Run test_workflow_and_changes
#        run: |
#          import os, subprocess
#          os.chdir("..")
#          print(".................about to run unit test")
#          mycmd = "python -m unittest AgileCloudManager.unitTests.test_workflow_and_changes"
#          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
#          while(True):
#            # returns None while subprocess is running
#            retcode = p.poll() 
#            line = p.stdout.readline()
#            print(line)
#            if retcode is not None:
#              break 
#      - shell: python
#        name: Run test_controller_custom
#        run: |
#          import os, subprocess
#          os.chdir("..")
#          print(".................about to run unit test")
#          mycmd = "python -m unittest AgileCloudManager.unitTests.test_controller_custom"
#          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
#          while(True):
#            # returns None while subprocess is running
#            retcode = p.poll() 
#            line = p.stdout.readline()
#            print(line)
#            if retcode is not None:
#              break 
#      - shell: python
#        name: Delete Secrets
#        run: |
#          import os
#          try:
#            os.remove("C:\\Users\\runneradmin\\acmconfig\\keys.yaml")
#          except OSError:
#            pass
#          try:
#            os.remove("C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml")
#          except OSError:
#            pass
#  unit-tests-windows-cloudformation:
#    needs: [unit-tests-linux-misc, unit-tests-linux-cloudformation, unit-tests-linux-terraform-packer, unit-tests-linux-arm-template]
#    runs-on: windows-latest
#    steps:
#      - uses: actions/checkout@v3
#      - id: ConfigureWindowsAgent
#        uses: ./.github/actions/windows-provisioner
#      - shell: python
#        name: Save secrets to file
#        env:
#          ACM_SECRET: ${{ secrets.ACM_REPO }}
#          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
#        run: |
#          import base64, subprocess, sys, os, pathlib
#          #Import first secrets file
#          with open('C:\\Users\\runneradmin\\acmconfig\\keys.yaml', 'w') as key_file:
#            key_file.write(os.environ['ACM_SECRET'])
#          #Import second secrets file
#          with open('C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml', 'w') as key_file:
#            key_file.write(os.environ['ACM_SECOND'])
#      - shell: python
#        name: Run setup on
#        run: |
#          import subprocess
#          import os
#          os.chdir('D:\\a\\AgileCloudManager\\')
#          print('About to: acm setup on')
#          mycmd = "python AgileCloudManager\\app\\acm.py setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-cf.git"
#          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
#          while(True):
#            # returns None while subprocess is running
#            retcode = p.poll() 
#            line = p.stdout.readline()
#            print(line)
#            if retcode is not None:
#              break 
#      - shell: python
#        name: Run test_controller_cf
#        run: |
#          import os, subprocess
#          os.chdir("..")
#          print(".................about to run unit test")
#          mycmd = "python -m unittest AgileCloudManager.unitTests.test_controller_cf"
#          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
#          while(True):
#            # returns None while subprocess is running
#            retcode = p.poll() 
#            line = p.stdout.readline()
#            print(line)
#            if retcode is not None:
#              break 
#      - shell: python
#        name: Delete Secrets
#        run: |
#          import os
#          try:
#            os.remove("C:\\Users\\runneradmin\\acmconfig\\keys.yaml")
#          except OSError:
#            pass
#          try:
#            os.remove("C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml")
#          except OSError:
#            pass
#  unit-tests-windows-terraform-packer:
#    needs: [unit-tests-linux-misc, unit-tests-linux-cloudformation, unit-tests-linux-terraform-packer, unit-tests-linux-arm-template]
#    runs-on: windows-latest
#    steps:
#      - uses: actions/checkout@v3
#      - id: ConfigureWindowsAgent
#        uses: ./.github/actions/windows-provisioner
#      - shell: python
#        name: Save secrets to file
#        env:
#          ACM_SECRET: ${{ secrets.ACM_REPO }}
#          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
#        run: |
#          import base64, subprocess, sys, os, pathlib
#          #Import first secrets file
#          with open('C:\\Users\\runneradmin\\acmconfig\\keys.yaml', 'w') as key_file:
#            key_file.write(os.environ['ACM_SECRET'])
#          #Import second secrets file
#          with open('C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml', 'w') as key_file:
#            key_file.write(os.environ['ACM_SECOND'])
#      - shell: python
#        name: Run setup on
#        run: |
#          import subprocess
#          import os
#          os.chdir('D:\\a\\AgileCloudManager\\')
#          print('About to: acm setup on')
#          mycmd = "python AgileCloudManager\\app\\acm.py setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-terraform-packer.git"
#          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
#          while(True):
#            # returns None while subprocess is running
#            retcode = p.poll() 
#            line = p.stdout.readline()
#            print(line)
#            if retcode is not None:
#              break 
#      - shell: python
#        name: Run test_controller_terraform_and_packer_one
#        run: |
#          import os, subprocess
#          os.chdir("..")
#          print(".................about to run unit test")
#          mycmd = "python -m unittest AgileCloudManager.unitTests.test_controller_terraform_and_packer_one"
#          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
#          while(True):
#            # returns None while subprocess is running
#            retcode = p.poll() 
#            line = p.stdout.readline()
#            print(line)
#            if retcode is not None:
#              break 
#      - shell: python
#        name: Run test_controller_terraform_and_packer_two
#        run: |
#          import os, subprocess
#          os.chdir("..")
#          print(".................about to run unit test")
#          mycmd = "python -m unittest AgileCloudManager.unitTests.test_controller_terraform_and_packer_two"
#          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
#          while(True):
#            # returns None while subprocess is running
#            retcode = p.poll() 
#            line = p.stdout.readline()
#            print(line)
#            if retcode is not None:
#              break 
#      - shell: python
#        name: Delete Secrets
#        run: |
#          import os
#          try:
#            os.remove("C:\\Users\\runneradmin\\acmconfig\\keys.yaml")
#          except OSError:
#            pass
#          try:
#            os.remove("C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml")
#          except OSError:
#            pass
#  unit-tests-windows-arm-template:
#    needs: [unit-tests-linux-misc, unit-tests-linux-cloudformation, unit-tests-linux-terraform-packer, unit-tests-linux-arm-template]
#    runs-on: windows-latest
#    steps:
#      - uses: actions/checkout@v3
#      - id: ConfigureWindowsAgent
#        uses: ./.github/actions/windows-provisioner
#      - shell: python
#        name: Save secrets to file
#        env:
#          ACM_SECRET: ${{ secrets.ACM_REPO }}
#          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
#        run: |
#          import base64, subprocess, sys, os, pathlib
#          #Import first secrets file
#          with open('C:\\Users\\runneradmin\\acmconfig\\keys.yaml', 'w') as key_file:
#            key_file.write(os.environ['ACM_SECRET'])
#          #Import second secrets file
#          with open('C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml', 'w') as key_file:
#            key_file.write(os.environ['ACM_SECOND'])
#      - shell: python
#        name: Run setup on
#        run: |
#          import subprocess
#          import os
#          os.chdir('D:\\a\\AgileCloudManager\\')
#          print('About to: acm setup on')
#          mycmd = "python AgileCloudManager\\app\\acm.py setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-arm.git"
#          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
#          while(True):
#            # returns None while subprocess is running
#            retcode = p.poll() 
#            line = p.stdout.readline()
#            print(line)
#            if retcode is not None:
#              break 
#      - shell: python
#        name: Run test_controller_arm
#        run: |
#          import os, subprocess
#          os.chdir("..")
#          print(".................about to run unit test")
#          mycmd = "python -m unittest AgileCloudManager.unitTests.test_controller_arm"
#          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
#          while(True):
#            # returns None while subprocess is running
#            retcode = p.poll() 
#            line = p.stdout.readline()
#            print(line)
#            if retcode is not None:
#              break 
#      - shell: python
#        name: Delete Secrets
#        run: |
#          import os
#          try:
#            os.remove("C:\\Users\\runneradmin\\acmconfig\\keys.yaml")
#          except OSError:
#            pass
#          try:
#            os.remove("C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml")
#          except OSError:
#            pass
#  push-to-test-branch:
#    needs: [unit-tests-linux-misc, unit-tests-linux-cloudformation, unit-tests-linux-terraform-packer, unit-tests-linux-arm-template, unit-tests-windows-misc, unit-tests-windows-cloudformation, unit-tests-windows-terraform-packer, unit-tests-windows-arm-template]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          token: ${{ secrets.HUSH }}
#      - shell: bash
#        name: Push changes to test branch
#        run: |
#          git config --global user.email "Agile.Cloud.Institute@GreenRiverIT.com"
#          git config --global user.name "AgileCloudInstitute"
#          git init
#          git remote set-url origin "https://github.com/${GITHUB_REPOSITORY}.git"
#          git branch -M test
#          git add --all
#          git push --force -u origin test
#          #git config --global user.email "Agile.Cloud.Institute@GreenRiverIT.com"
#          #git config --global user.name "AgileCloudInstitute"
#          #git init
#          #git remote set-url origin "https://github.com/${GITHUB_REPOSITORY}.git"
#          #git branch -M test
#          #git add --all
#          #git push --force -u origin test
