name: final-release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true
        type: string
      description:
        description: 'Description of release'
        required: true
        type: string
      RELEASE_BUCKET_NAME:
        description: 's3 Bucket name to which releases are sent'
        required: true
        type: string
jobs:
  release-linux-prerelease-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.HUSH }}
      - shell: bash
        name: Retrieve exe and push it to storage
        env:
          DESCRIPTION: ${{ inputs.description }}
          VERSION: ${{ inputs.version }}
          GIT_PAT: ${{ secrets.HUSH }}  
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}  
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}  
          RELEASE_BUCKET_REGION: ${{ secrets.RELEASE_BUCKET_REGION }}  
        run: |
          vers="linux-"$VERSION
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release" 

          #Configure aws
          mkdir -p ~/.aws/
          cat > ~/.aws/credentials<< EOF
          [default]
          aws_access_key_id=${AWS_ACCESS_KEY_ID}
          aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}
          EOF
          cat > ~/.aws/config<< EOF
          [default]
          region=us-west-2
          output=json
          EOF

          #Retrieve the code that most recently passed all the e2e tests in the test environ
          git config --global user.email "jim@agilecloudinstitute.io"
          git config --global user.name "AgileCloudInstitute"
          git init
          #git remote set-url origin "https://github.com/${GITHUB_REPOSITORY}.git"
          git remote set-url origin "https://github.com/AgileCloudInstitute/AgileCloudManager.git"
          git fetch origin
          git checkout -b staging origin/master
          #
          echo "About to pwd"
          pwd
          echo "About to list directory contents of initial dir after retrieving code"
          ls -al

          #Check to see if license is present in source code
          mypath=`pwd`
          echo "value of my path is: "
          echo $mypath
          licenseAndPath="$mypath""/LICENSE.TXT"
          echo "licenseAndPath is: "  
          echo $licenseAndPath  
          cat $licenseAndPath | while read line; do echo "$line"; done
          #licenseAndPath="notarealfile.txt"
          #echo "licenseAndPath2 is: "  
          #echo $licenseAndPath  

          if [ ! -e "$licenseAndPath" ]           
          then 
              echo "license is not present, so throwing an error" >&2
              exit 1
          else
              echo "Found File $licenseAndPath"
          fi

          #Create executable
          pip install -U pyinstaller
          cd app
          rm __init__.py
          pyinstaller acm.py
          tar -cvf acm_build.tar dist/acm

          echo "About to list contents of app"
          ls -al
          echo "About to list contents of dist/acm"
          cd dist/acm
          cp $licenseAndPath .
          ls -al

          #...................................
          #Check to see if license is present in compiled app
          mypath=`pwd`
          echo "value of my path is: "
          echo $mypath
          licenseAndPath="$mypath""/LICENSE.TXT"
          echo "licenseAndPath is: "  
          echo $licenseAndPath  
          cat $licenseAndPath | while read line; do echo "$line"; done
          #licenseAndPath="notarealfile.txt"
          #echo "licenseAndPath2 is: "  
          #echo $licenseAndPath  

          if [ ! -e "$licenseAndPath" ]           
          then 
              echo "license is not present, so throwing an error" >&2
              exit 1
          else
              echo "Found File $licenseAndPath"
          fi


          #...................................
          #Create tar
          #nameOfRelease="ImportantName"
          echo "About to print name of release"
          echo $nameOfRelease 
          nameOfTar="../"$nameOfRelease".tar.gz"
          nameOfTarNoDots=$nameOfRelease".tar.gz"
          echo "About to print nameOfTar"
          echo $nameOfTar
          tar -czvf $nameOfTar *
          echo "About to ls -al after creating tar"
          ls -al
          echo "About to ls -al one dir up .. after creating tar"
          cd ..
          ls -al

          #...................................
          #Move tar to stg folder
          mkdir /home/runner/stg
          mv $nameOfTarNoDots /home/runner/stg
          cd /home/runner/stg
          echo "About to ls -al /home/runner/stg after moving the tar to it"
          ls -al

          #Push artifact to s3
          echo "About to push the tar to remote storage using aws s3 cp"
          s3Argument="s3://"$RELEASE_BUCKET_NAME"/"
          aws s3 cp /home/runner/stg/$nameOfTarNoDots $s3Argument 
          echo "About to add tag to the tar using aws s3api put-object-tagging"
          aws s3api put-object-tagging --bucket $RELEASE_BUCKET_NAME --key $nameOfTarNoDots --tagging "TagSet={Key=public,Value=yes}"

  release-windows-prerelease-version:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.HUSH }}
      - shell: pwsh
        name: Release
        env:
          DESCRIPTION: ${{ inputs.description }}
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}
          RELEASE_BUCKET_REGION: ${{ secrets.RELEASE_BUCKET_REGION }}
          GIT_PAT: ${{ secrets.HUSH }}
        run: |
          $vers="windows-"+${env:VERSION}
          echo "About to print version"
          echo $vers
          $nameOfRelease="AgileCloudManager-"+$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          #Configure aws
          New-Item -ItemType File -Path ~\\.aws\\credentials -Force
          $credentialsContent = @"
          [default]
          aws_access_key_id=${env:AWS_ACCESS_KEY_ID}
          aws_secret_access_key=${env:AWS_SECRET_ACCESS_KEY}
          "@
          Set-Content -Path ~\\.aws\\credentials -Value $credentialsContent
          $configContent = @"
          [default]
          region=us-west-2
          output=json
          "@
          Set-Content -Path ~\\.aws\\config -Value $configContent
          #Retrieve the executable that most recently passed all the e2e tests in the test environ
          git config --global user.email "jim@agilecloudinstitute.io"
          git config --global user.name "AgileCloudInstitute"
          git init
          git remote set-url origin "https://github.com/AgileCloudInstitute/AgileCloudManager.git"
          git fetch origin
          git checkout -b staging origin/master
          #
          echo "About to get-location"
          get-location
          echo "About to list directory contents of initial dir after retrieving code"
          dir

          #Check for license in source code
          $LicensePath = Join-Path -Path $pwd -ChildPath "LICENSE.TXT"
          echo "License and Path is: "
          echo $LicensePath
          #$LicensePath = Join-Path -Path $pwd -ChildPath "THROW_ERROR.TXT"
          if(!(Test-Path -path $LicensePath) )
          {
              Write-Host "$LicensePath doesn't exist in source code."
              Exit 1
          }

          #compile app
          $env:Path = "C:\\hostedtoolcache\\windows\\Python\\3.10.7\\x64\\Scripts\\;" + $env:Path
          python -m pip install --upgrade pip requests
          python -m pip install --upgrade pip PyYaml
          python -m pip install --upgrade pip pyinstaller
          python -m pip install --upgrade charset-normalizer
          python -m pip install --upgrade chardet

          pyinstaller --version

          #python -m pip install --upgrade pip PyYaml
          #python -m pip install --upgrade pip pyinstaller
          New-Item -ItemType Directory -Force -Path C:\\Users\\runneradmin\\acmhome\\
          echo "About to start"
          cd app
          del __init__.py
          echo "About to: pyinstaller acm.py"
          pyinstaller acm.py
          Move-Item -Path "dist\\acm\\*" -Destination "C:\\Users\\runneradmin\\acmhome\\"
          echo "About to dir C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\Users\\runneradmin\\acmhome\\
          dir 

          #Create release directory and move artifact to it
          New-Item -ItemType Directory -Path C:\Users\runner\release -Force
          $currDir = (Convert-Path -Path (Get-Location))
          echo "About to print currDir"
          echo $currDir
          $currDirContents = $currDir+"\*"
          echo "About to print currDirContents"
          echo $currDirContents
          Copy-Item -Path $currDirContents -Recurse -Destination C:\Users\runner\release -Verbose
          Copy-Item -Path $LicensePath -Destination C:\Users\runner\release
          echo "About to list directory contents of C:\Users\runner\release after copying exe into it"
          dir C:\Users\runner\release

          #Check if LICENSE.TXT is present in the compiled app directory.
          $DestinationLicensePath = Join-Path -Path C:\Users\runner\release -ChildPath "LICENSE.TXT"
          #$DestinationLicensePath = Join-Path -Path C:\Users\runner\release -ChildPath "THROW_ERROR.TXT"
          echo "Destination License and Path is: "
          echo $DestinationLicensePath
          if(!(Test-Path -path $DestinationLicensePath) )
          {
              Write-Host "$DestinationLicensePath doesn't exist in compiled code."
              Exit 1
          }

          #Zip the artifact
          $nameOfZip=$nameOfRelease+".zip"
          echo "About to print nameOfZip"
          echo $nameOfZip
          Compress-Archive -Path C:\Users\runner\release\* -DestinationPath $nameOfZip
          #echo "About to dir current directory after creating zip"
          dir
          New-Item -ItemType Directory -Path C:\Users\runner\stg -Force

          #Push the zipped and compiled app to s3
          echo "About to push the tar to remote storage using aws s3 cp"
          $s3Argument="s3://"+${env:RELEASE_BUCKET_NAME}+"/"
          aws s3 cp $nameOfZip $s3Argument 
          echo "About to add tag to the tar using aws s3api put-object-tagging"
          aws s3api put-object-tagging --bucket ${env:RELEASE_BUCKET_NAME} --key $nameOfZip --tagging '{\"TagSet\": [{\"Key\":\"public\",\"Value\":\"yes\"}]}'

  e2e-tests-linux-terraform-packer-appliance:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}
        run: |
          nameOfRelease="AgileCloudManager-linux-"$VERSION
          vers="linux-"$VERSION
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          nameOfTar=$nameOfRelease".tar.gz"
          echo "About to print nameOfTar"
          echo $nameOfTar
          #Start of wget version
          echo "About to ls -al initially"
          ls -al
          addressForWget="https://download.agilecloudinstitute.io/"$nameOfTar
          echo "About to wget"
          wget $addressForWget
          echo "About to ls -al after wget"
          ls -al
          echo "Done with ls -al"
          
          mkdir -p /home/runner/acmhome/
          mv $nameOfTar /home/runner/acmhome/
          cd /home/runner/acmhome/
          tar -xvf $nameOfTar
          rm $nameOfTar
          echo "About to ls -al /home/runner/acmhome/ after extracting tarball"
          ls -al
          PATH=$PATH:/home/runner/acmhome/;export PATH

          #...................................
          #Check to see if license is present in compiled app
          mypath=`pwd`
          echo "value of my path is: "
          echo $mypath
          licenseAndPath="$mypath""/LICENSE.TXT"
          echo "licenseAndPath is: "  
          echo $licenseAndPath  
          cat $licenseAndPath | while read line; do echo "$line"; done
          #licenseAndPath="notarealfile.txt"
          #echo "licenseAndPath2 is: "  
          #echo $licenseAndPath  

          if [ ! -e "$licenseAndPath" ]           
          then 
              echo "license is not present, so throwing an error" >&2
              exit 1
          else
              echo "Found File $licenseAndPath"
          fi

          echo "About to check acm version"
          acm version
          echo "version input from workflow is: "
          echo $VERSION
          myAcmVers=$(acm version)
          echo "my acmVersion is: "
          echo "$myAcmVers"
          if [[ "$myAcmVers" = "$VERSION" ]] 
          then
            echo "version of acm matches version given as workflow input."
          else
            echo "ERROR: The version of acm given as workflow input does not match the version output by the cli."
            exit 1
          fi
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ZERO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ZERO }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-terraform-packer.git
      - id: Acm_appliance_On_Ubuntu
        uses: ./.github/actions/acm-appliance-on-ubuntu
      - id: Acm_appliance_Off_Ubuntu
        uses: ./.github/actions/acm-appliance-off-ubuntu
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-linux-terraform-packer-services:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}
        run: |
          nameOfRelease="AgileCloudManager-linux-"$VERSION
          vers="linux-"$VERSION
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          nameOfTar=$nameOfRelease".tar.gz"
          echo "About to print nameOfTar"
          echo $nameOfTar
          #Start of wget version
          echo "About to ls -al initially"
          ls -al
          addressForWget="https://download.agilecloudinstitute.io/"$nameOfTar
          echo "About to wget"
          wget $addressForWget
          echo "About to ls -al after wget"
          ls -al
          echo "Done with ls -al"
          
          mkdir -p /home/runner/acmhome/
          mv $nameOfTar /home/runner/acmhome/
          cd /home/runner/acmhome/
          tar -xvf $nameOfTar
          rm $nameOfTar
          echo "About to ls -al /home/runner/acmhome/ after extracting tarball"
          ls -al
          PATH=$PATH:/home/runner/acmhome/;export PATH

          #...................................
          #Check to see if license is present in compiled app
          mypath=`pwd`
          echo "value of my path is: "
          echo $mypath
          licenseAndPath="$mypath""/LICENSE.TXT"
          echo "licenseAndPath is: "  
          echo $licenseAndPath  
          cat $licenseAndPath | while read line; do echo "$line"; done
          #licenseAndPath="notarealfile.txt"
          #echo "licenseAndPath2 is: "  
          #echo $licenseAndPath  

          if [ ! -e "$licenseAndPath" ]           
          then 
              echo "license is not present, so throwing an error" >&2
              exit 1
          else
              echo "Found File $licenseAndPath"
          fi

          echo "About to check acm version"
          acm version
          echo "version input from workflow is: "
          echo $VERSION
          myAcmVers=$(acm version)
          echo "my acmVersion is: "
          echo "$myAcmVers"
          if [[ "$myAcmVers" = "$VERSION" ]] 
          then
            echo "version of acm matches version given as workflow input."
          else
            echo "ERROR: The version of acm given as workflow input does not match the version output by the cli."
            exit 1
          fi
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ONE }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ONE }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-terraform-packer.git
      - id: Acm_ServiceType_On_tfbackend_Ubuntu
        uses: ./.github/actions/acm-service-type-on-ubuntu
        with:
          system_name: tfbackend
          service_type: tfBackend
      - id: Acm_ServiceType_Off_tfbackend_Ubuntu
        uses: ./.github/actions/acm-service-type-off-ubuntu
        with:
          system_name: tfbackend
          service_type: tfBackend
      - id: Acm_ServiceInstance_On_adminaccounts_Ubuntu
        uses: ./.github/actions/acm-service-instance-on-ubuntu
        with:
          system_name: tfbackend
          service_type: tfBackend
          service_instance: adminAccounts
      - id: Acm_ServiceInstance_Off_adminaccounts_Ubuntu
        uses: ./.github/actions/acm-service-instance-off-ubuntu
        with:
          system_name: tfbackend
          service_type: tfBackend
          service_instance: adminAccounts
      - id: Acm_Services_On_tfbackend_Ubuntu
        uses: ./.github/actions/acm-services-on-ubuntu
        with:
          system_name: tfbackend
      - id: Acm_Foundation_On_admin_Ubuntu
        uses: ./.github/actions/acm-foundation-on-ubuntu
        with:
          system_name: admin
      - id: Acm_Services_On_admin_Ubuntu
        uses: ./.github/actions/acm-services-on-ubuntu
        with:
          system_name: admin
      - id: Acm_Foundation_On_agents_Ubuntu
        uses: ./.github/actions/acm-foundation-on-ubuntu
        with:
          system_name: agents
      - id: Acm_Services_On_agents_Ubuntu
        uses: ./.github/actions/acm-services-on-ubuntu
        with:
          system_name: agents
      - id: Acm_Services_Off_agents_Ubuntu
        uses: ./.github/actions/acm-services-off-ubuntu
        with:
          system_name: agents
      - id: Acm_Foundation_Off_agents_Ubuntu
        uses: ./.github/actions/acm-foundation-off-ubuntu
        with:
          system_name: agents
      - id: Acm_Services_Off_admin_Ubuntu
        uses: ./.github/actions/acm-services-off-ubuntu
        with:
          system_name: admin
      - id: Acm_Foundation_Off_admin_Ubuntu
        uses: ./.github/actions/acm-foundation-off-ubuntu
        with:
          system_name: admin
      - id: Acm_Services_Off_tfbackend_Ubuntu
        uses: ./.github/actions/acm-services-off-ubuntu
        with:
          system_name: tfbackend
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-linux-arm-appliance:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}
        run: |
          nameOfRelease="AgileCloudManager-linux-"$VERSION
          vers="linux-"$VERSION
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          nameOfTar=$nameOfRelease".tar.gz"
          echo "About to print nameOfTar"
          echo $nameOfTar
          #Start of wget version
          echo "About to ls -al initially"
          ls -al
          addressForWget="https://download.agilecloudinstitute.io/"$nameOfTar
          echo "About to wget"
          wget $addressForWget
          echo "About to ls -al after wget"
          ls -al
          echo "Done with ls -al"
          
          mkdir -p /home/runner/acmhome/
          mv $nameOfTar /home/runner/acmhome/
          cd /home/runner/acmhome/
          tar -xvf $nameOfTar
          rm $nameOfTar
          echo "About to ls -al /home/runner/acmhome/ after extracting tarball"
          ls -al
          PATH=$PATH:/home/runner/acmhome/;export PATH

          #...................................
          #Check to see if license is present in compiled app
          mypath=`pwd`
          echo "value of my path is: "
          echo $mypath
          licenseAndPath="$mypath""/LICENSE.TXT"
          echo "licenseAndPath is: "  
          echo $licenseAndPath  
          cat $licenseAndPath | while read line; do echo "$line"; done
          #licenseAndPath="notarealfile.txt"
          #echo "licenseAndPath2 is: "  
          #echo $licenseAndPath  

          if [ ! -e "$licenseAndPath" ]           
          then 
              echo "license is not present, so throwing an error" >&2
              exit 1
          else
              echo "Found File $licenseAndPath"
          fi

          echo "About to check acm version"
          acm version
          echo "version input from workflow is: "
          echo $VERSION
          myAcmVers=$(acm version)
          echo "my acmVersion is: "
          echo "$myAcmVers"
          if [[ "$myAcmVers" = "$VERSION" ]] 
          then
            echo "version of acm matches version given as workflow input."
          else
            echo "ERROR: The version of acm given as workflow input does not match the version output by the cli."
            exit 1
          fi
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ZERO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ZERO }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - uses: actions/checkout@v3
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-arm.git
      - id: Acm_appliance_On_Ubuntu
        uses: ./.github/actions/acm-appliance-on-ubuntu
      - id: Acm_appliance_Off_Ubuntu
        uses: ./.github/actions/acm-appliance-off-ubuntu
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-linux-arm-services:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}
        run: |
          nameOfRelease="AgileCloudManager-linux-"$VERSION
          vers="linux-"$VERSION
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          nameOfTar=$nameOfRelease".tar.gz"
          echo "About to print nameOfTar"
          echo $nameOfTar
          #Start of wget version
          echo "About to ls -al initially"
          ls -al
          addressForWget="https://download.agilecloudinstitute.io/"$nameOfTar
          echo "About to wget"
          wget $addressForWget
          echo "About to ls -al after wget"
          ls -al
          echo "Done with ls -al"
          
          mkdir -p /home/runner/acmhome/
          mv $nameOfTar /home/runner/acmhome/
          cd /home/runner/acmhome/
          tar -xvf $nameOfTar
          rm $nameOfTar
          echo "About to ls -al /home/runner/acmhome/ after extracting tarball"
          ls -al
          PATH=$PATH:/home/runner/acmhome/;export PATH

          #...................................
          #Check to see if license is present in compiled app
          mypath=`pwd`
          echo "value of my path is: "
          echo $mypath
          licenseAndPath="$mypath""/LICENSE.TXT"
          echo "licenseAndPath is: "  
          echo $licenseAndPath  
          cat $licenseAndPath | while read line; do echo "$line"; done
          #licenseAndPath="notarealfile.txt"
          #echo "licenseAndPath2 is: "  
          #echo $licenseAndPath  

          if [ ! -e "$licenseAndPath" ]           
          then 
              echo "license is not present, so throwing an error" >&2
              exit 1
          else
              echo "Found File $licenseAndPath"
          fi

          echo "About to check acm version"
          acm version
          echo "version input from workflow is: "
          echo $VERSION
          myAcmVers=$(acm version)
          echo "my acmVersion is: "
          echo "$myAcmVers"
          if [[ "$myAcmVers" = "$VERSION" ]] 
          then
            echo "version of acm matches version given as workflow input."
          else
            echo "ERROR: The version of acm given as workflow input does not match the version output by the cli."
            exit 1
          fi
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ONE }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ONE }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - uses: actions/checkout@v3
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-arm.git
      - id: Acm_Foundation_On_Ubuntu
        uses: ./.github/actions/acm-foundation-on-ubuntu
        with:
          system_name: agents-arm
      - id: Acm_Services_On_Ubuntu
        uses: ./.github/actions/acm-services-on-ubuntu
        with:
          system_name: agents-arm
      - id: Acm_Services_Off_Ubuntu
        uses: ./.github/actions/acm-services-off-ubuntu
        with:
          system_name: agents-arm
      - id: Acm_ServiceType_On_Ubuntu
        uses: ./.github/actions/acm-service-type-on-ubuntu
        with:
          system_name: agents-arm
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceType_Off_Ubuntu
        uses: ./.github/actions/acm-service-type-off-ubuntu
        with:
          system_name: agents-arm
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceInstance_On_Ubuntu
        uses: ./.github/actions/acm-service-instance-on-ubuntu
        with:
          system_name: agents-arm
          service_type: subnetsWithScaleSet
          service_instance: azdoAgents
      - id: Acm_ServiceInstance_Off_Ubuntu
        uses: ./.github/actions/acm-service-instance-off-ubuntu
        with:
          system_name: agents-arm
          service_type: subnetsWithScaleSet
          service_instance: azdoAgents
      - id: Acm_Foundation_Off_Ubuntu
        uses: ./.github/actions/acm-foundation-off-ubuntu
        with:
          system_name: agents-arm
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-linux-cloudformation-appliance:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}
        run: |
          nameOfRelease="AgileCloudManager-linux-"$VERSION
          vers="linux-"$VERSION
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          nameOfTar=$nameOfRelease".tar.gz"
          echo "About to print nameOfTar"
          echo $nameOfTar
          #Start of wget version
          echo "About to ls -al initially"
          ls -al
          addressForWget="https://download.agilecloudinstitute.io/"$nameOfTar
          echo "About to wget"
          wget $addressForWget
          echo "About to ls -al after wget"
          ls -al
          echo "Done with ls -al"
          
          mkdir -p /home/runner/acmhome/
          mv $nameOfTar /home/runner/acmhome/
          cd /home/runner/acmhome/
          tar -xvf $nameOfTar
          rm $nameOfTar
          echo "About to ls -al /home/runner/acmhome/ after extracting tarball"
          ls -al
          PATH=$PATH:/home/runner/acmhome/;export PATH

          #...................................
          #Check to see if license is present in compiled app
          mypath=`pwd`
          echo "value of my path is: "
          echo $mypath
          licenseAndPath="$mypath""/LICENSE.TXT"
          echo "licenseAndPath is: "  
          echo $licenseAndPath  
          cat $licenseAndPath | while read line; do echo "$line"; done
          #licenseAndPath="notarealfile.txt"
          #echo "licenseAndPath2 is: "  
          #echo $licenseAndPath  

          if [ ! -e "$licenseAndPath" ]           
          then 
              echo "license is not present, so throwing an error" >&2
              exit 1
          else
              echo "Found File $licenseAndPath"
          fi

          echo "About to check acm version"
          acm version
          echo "version input from workflow is: "
          echo $VERSION
          myAcmVers=$(acm version)
          echo "my acmVersion is: "
          echo "$myAcmVers"
          if [[ "$myAcmVers" = "$VERSION" ]] 
          then
            echo "version of acm matches version given as workflow input."
          else
            echo "ERROR: The version of acm given as workflow input does not match the version output by the cli."
            exit 1
          fi
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ZERO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ZERO }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with: 
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-cloudformation.git
      - id: Acm_appliance_On_Ubuntu
        uses: ./.github/actions/acm-appliance-on-ubuntu
      - id: Acm_appliance_Off_Ubuntu
        uses: ./.github/actions/acm-appliance-off-ubuntu
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-linux-cloudformation-services:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}
        run: |
          nameOfRelease="AgileCloudManager-linux-"$VERSION
          vers="linux-"$VERSION
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          nameOfTar=$nameOfRelease".tar.gz"
          echo "About to print nameOfTar"
          echo $nameOfTar
          #Start of wget version
          echo "About to ls -al initially"
          ls -al
          addressForWget="https://download.agilecloudinstitute.io/"$nameOfTar
          echo "About to wget"
          wget $addressForWget
          echo "About to ls -al after wget"
          ls -al
          echo "Done with ls -al"
          
          mkdir -p /home/runner/acmhome/
          mv $nameOfTar /home/runner/acmhome/
          cd /home/runner/acmhome/
          tar -xvf $nameOfTar
          rm $nameOfTar
          echo "About to ls -al /home/runner/acmhome/ after extracting tarball"
          ls -al
          PATH=$PATH:/home/runner/acmhome/;export PATH

          #...................................
          #Check to see if license is present in compiled app
          mypath=`pwd`
          echo "value of my path is: "
          echo $mypath
          licenseAndPath="$mypath""/LICENSE.TXT"
          echo "licenseAndPath is: "  
          echo $licenseAndPath  
          cat $licenseAndPath | while read line; do echo "$line"; done
          #licenseAndPath="notarealfile.txt"
          #echo "licenseAndPath2 is: "  
          #echo $licenseAndPath  

          if [ ! -e "$licenseAndPath" ]           
          then 
              echo "license is not present, so throwing an error" >&2
              exit 1
          else
              echo "Found File $licenseAndPath"
          fi

          echo "About to check acm version"
          acm version
          echo "version input from workflow is: "
          echo $VERSION
          myAcmVers=$(acm version)
          echo "my acmVersion is: "
          echo "$myAcmVers"
          if [[ "$myAcmVers" = "$VERSION" ]] 
          then
            echo "version of acm matches version given as workflow input."
          else
            echo "ERROR: The version of acm given as workflow input does not match the version output by the cli."
            exit 1
          fi
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ONE }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ONE }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with: 
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-cloudformation.git
      - id: Acm_Foundation_On_Ubuntu
        uses: ./.github/actions/acm-foundation-on-ubuntu
        with:
          system_name: cf-demo
      - id: Acm_Services_On_Ubuntu
        uses: ./.github/actions/acm-services-on-ubuntu
        with:
          system_name: cf-demo
      - id: Acm_Services_Off_Ubuntu
        uses: ./.github/actions/acm-services-off-ubuntu
        with:
          system_name: cf-demo
      - id: Acm_ServiceType_On_Ubuntu
        uses: ./.github/actions/acm-service-type-on-ubuntu
        with:
          system_name: cf-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceType_Off_Ubuntu
        uses: ./.github/actions/acm-service-type-off-ubuntu
        with:
          system_name: cf-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceInstance_On_Ubuntu
        uses: ./.github/actions/acm-service-instance-on-ubuntu
        with:
          system_name: cf-demo
          service_type: subnetsWithScaleSet
          service_instance: ec2-with-custom-imgx
      - id: Acm_ServiceInstance_Off_Ubuntu
        uses: ./.github/actions/acm-service-instance-off-ubuntu
        with:
          system_name: cf-demo
          service_type: subnetsWithScaleSet
          service_instance: ec2-with-custom-imgx
      - id: Acm_Foundation_Off_Ubuntu
        uses: ./.github/actions/acm-foundation-off-ubuntu
        with:
          system_name: cf-demo
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-linux-custom-appliance:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}
        run: |
          nameOfRelease="AgileCloudManager-linux-"$VERSION
          vers="linux-"$VERSION
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          nameOfTar=$nameOfRelease".tar.gz"
          echo "About to print nameOfTar"
          echo $nameOfTar
          #Start of wget version
          echo "About to ls -al initially"
          ls -al
          addressForWget="https://download.agilecloudinstitute.io/"$nameOfTar
          echo "About to wget"
          wget $addressForWget
          echo "About to ls -al after wget"
          ls -al
          echo "Done with ls -al"
          
          mkdir -p /home/runner/acmhome/
          mv $nameOfTar /home/runner/acmhome/
          cd /home/runner/acmhome/
          tar -xvf $nameOfTar
          rm $nameOfTar
          echo "About to ls -al /home/runner/acmhome/ after extracting tarball"
          ls -al
          PATH=$PATH:/home/runner/acmhome/;export PATH

          #...................................
          #Check to see if license is present in compiled app
          mypath=`pwd`
          echo "value of my path is: "
          echo $mypath
          licenseAndPath="$mypath""/LICENSE.TXT"
          echo "licenseAndPath is: "  
          echo $licenseAndPath  
          cat $licenseAndPath | while read line; do echo "$line"; done
          #licenseAndPath="notarealfile.txt"
          #echo "licenseAndPath2 is: "  
          #echo $licenseAndPath  

          if [ ! -e "$licenseAndPath" ]           
          then 
              echo "license is not present, so throwing an error" >&2
              exit 1
          else
              echo "Found File $licenseAndPath"
          fi

          echo "About to check acm version"
          acm version
          echo "version input from workflow is: "
          echo $VERSION
          myAcmVers=$(acm version)
          echo "my acmVersion is: "
          echo "$myAcmVers"
          if [[ "$myAcmVers" = "$VERSION" ]] 
          then
            echo "version of acm matches version given as workflow input."
          else
            echo "ERROR: The version of acm given as workflow input does not match the version output by the cli."
            exit 1
          fi
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ZERO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ZERO }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom.git
      - id: Acm_appliance_On_Ubuntu
        uses: ./.github/actions/acm-appliance-on-ubuntu
      - id: Acm_appliance_Off_Ubuntu
        uses: ./.github/actions/acm-appliance-off-ubuntu
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-linux-custom-services:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}
        run: |
          nameOfRelease="AgileCloudManager-linux-"$VERSION
          vers="linux-"$VERSION
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          nameOfTar=$nameOfRelease".tar.gz"
          echo "About to print nameOfTar"
          echo $nameOfTar
          #Start of wget version
          echo "About to ls -al initially"
          ls -al
          addressForWget="https://download.agilecloudinstitute.io/"$nameOfTar
          echo "About to wget"
          wget $addressForWget
          echo "About to ls -al after wget"
          ls -al
          echo "Done with ls -al"
          
          mkdir -p /home/runner/acmhome/
          mv $nameOfTar /home/runner/acmhome/
          cd /home/runner/acmhome/
          tar -xvf $nameOfTar
          rm $nameOfTar
          echo "About to ls -al /home/runner/acmhome/ after extracting tarball"
          ls -al
          PATH=$PATH:/home/runner/acmhome/;export PATH

          #...................................
          #Check to see if license is present in compiled app
          mypath=`pwd`
          echo "value of my path is: "
          echo $mypath
          licenseAndPath="$mypath""/LICENSE.TXT"
          echo "licenseAndPath is: "  
          echo $licenseAndPath  
          cat $licenseAndPath | while read line; do echo "$line"; done
          #licenseAndPath="notarealfile.txt"
          #echo "licenseAndPath2 is: "  
          #echo $licenseAndPath  

          if [ ! -e "$licenseAndPath" ]           
          then 
              echo "license is not present, so throwing an error" >&2
              exit 1
          else
              echo "Found File $licenseAndPath"
          fi

          echo "About to check acm version"
          acm version
          echo "version input from workflow is: "
          echo $VERSION
          myAcmVers=$(acm version)
          echo "my acmVersion is: "
          echo "$myAcmVers"
          if [[ "$myAcmVers" = "$VERSION" ]] 
          then
            echo "version of acm matches version given as workflow input."
          else
            echo "ERROR: The version of acm given as workflow input does not match the version output by the cli."
            exit 1
          fi
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ONE }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ONE }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom.git
      - id: Acm_Foundation_On_Ubuntu
        uses: ./.github/actions/acm-foundation-on-ubuntu
        with:
          system_name: custom-demo
      - id: Acm_Services_On_Ubuntu
        uses: ./.github/actions/acm-services-on-ubuntu
        with:
          system_name: custom-demo
      - id: Acm_Services_Off_Ubuntu
        uses: ./.github/actions/acm-services-off-ubuntu
        with:
          system_name: custom-demo
      - id: Acm_ServiceType_On_Ubuntu
        uses: ./.github/actions/acm-service-type-on-ubuntu
        with:
          system_name: custom-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceType_Off_Ubuntu
        uses: ./.github/actions/acm-service-type-off-ubuntu
        with:
          system_name: custom-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceInstance_On_Ubuntu
        uses: ./.github/actions/acm-service-instance-on-ubuntu
        with:
          system_name: custom-demo
          service_type: subnetsWithScaleSet
          service_instance: custom-scaleset
      - id: Acm_ServiceInstance_Off_Ubuntu
        uses: ./.github/actions/acm-service-instance-off-ubuntu
        with:
          system_name: custom-demo
          service_type: subnetsWithScaleSet
          service_instance: custom-scaleset
      - id: Acm_Foundation_Off_Ubuntu
        uses: ./.github/actions/acm-foundation-off-ubuntu
        with:
          system_name: custom-demo
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-windows-arm-appliance:
    needs: [ release-linux-prerelease-version, release-windows-prerelease-version ]
    runs-on: windows-latest
    steps:  
      - uses: actions/checkout@v3 
      - id: ConfigureWindowsAgent 
        uses: ./.github/actions/windows-provisioner
      - shell: pwsh
        name: Download and extract Release
        env:
          description: ${{ inputs.description }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}  
          version: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          $vers="windows-"+$env:VERSION
          $zipName="AgileCloudManager-"+$vers+".zip"
          echo "About to dir initially"
          dir
          $addressForCurl="https://download.agilecloudinstitute.io/"+$zipName
          echo "About to curl"
          curl -o $zipName $addressForCurl
          echo "About to dir after curl"
          dir
          echo "Done with dir"
          mkdir staging
          Expand-Archive $zipName -DestinationPath "staging"
          echo "About to dir staging"
          dir staging
          $folderName="AgileCloudManager-"+$vers
          $sourceFolderName="staging\\*"
          Copy-Item -Path $sourceFolderName -Recurse -Destination C:\\Users\\runneradmin\\acmhome\\ -Verbose
          echo "About to dir C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\Users\\runneradmin\\acmhome\\
          dir 

          #Check to see if LICENSE.TXT is inside the artifact that was just downloaded.
          $DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "LICENSE.TXT"
          #$DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "THROW_ERROR.TXT"
          echo "Destination License and Path is: "
          echo $DestinationLicensePath
          if(!(Test-Path -path $DestinationLicensePath) )
          {
              Write-Host "$DestinationLicensePath doesn't exist in compiled code."
              Exit 1
          }

          #Check to see if version in cli matches version in workflow input
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          echo "About to print acm cli version command output: "
          acm version
          echo "About to print version that was entered into the workflow input: "
          echo $env:VERSION
          #$myAcmVersion = acm version
          #echo "1About to print my AcmVersion value: "
          #echo $myAcmVersion
          #$myAcmVersion = (acm version) | Out-String
          #echo "2About to print my AcmVersion value: "
          #echo $myAcmVersion
          $myAcmVersion = "Throw_An_Error"
          echo "3About to print my AcmVersion value: "
          echo $myAcmVersion
          $myAcmVersion = [string](acm version)
          echo "4About to print my AcmVersion value: "
          echo $myAcmVersion

          if ($myAcmVersion -eq $env:VERSION)
          { 
              Write-Host "The version given by cli output matches the version given by workflow input.  This is the expected result."
          } 
          else 
          {
              Write-Host "ERROR: The version given by cli output does NOT match the version given by workflow input.  This is an error."
              Exit 1
          }
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_TWO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_TWO }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import config file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\config.yaml', 'w') as config_file:
            config_file.write(os.environ['ACM_CONFIG'])
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
      - id: Acm_Setup_On_Windows
        uses: ./.github/actions/acm-setup-on-windows
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-arm.git
      - id: Acm_appliance_On_Windows
        uses: ./.github/actions/acm-appliance-on-windows
      - id: Acm_appliance_Off_Windows
        uses: ./.github/actions/acm-appliance-off-windows
      - id: Acm_Setup_Off_Windows
        uses: ./.github/actions/acm-setup-off-windows
      - name: Delete Secrets
        run: |
          del "C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml"
          #del 'C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml'

  e2e-tests-windows-arm-services:
    needs: [ release-linux-prerelease-version, release-windows-prerelease-version ]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3 
      - id: ConfigureWindowsAgent 
        uses: ./.github/actions/windows-provisioner
      - shell: pwsh
        name: Download and extract Release
        env:
          description: ${{ inputs.description }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}  
          version: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          $vers="windows-"+$env:VERSION
          $zipName="AgileCloudManager-"+$vers+".zip"
          echo "About to dir initially"
          dir
          $addressForCurl="https://download.agilecloudinstitute.io/"+$zipName
          echo "About to curl"
          curl -o $zipName $addressForCurl
          echo "About to dir after curl"
          dir
          echo "Done with dir"
          mkdir staging
          Expand-Archive $zipName -DestinationPath "staging"
          echo "About to dir staging"
          dir staging
          $folderName="AgileCloudManager-"+$vers
          $sourceFolderName="staging\\*"
          Copy-Item -Path $sourceFolderName -Recurse -Destination C:\\Users\\runneradmin\\acmhome\\ -Verbose
          echo "About to dir C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\Users\\runneradmin\\acmhome\\
          dir 

          #Check to see if LICENSE.TXT is inside the artifact that was just downloaded.
          $DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "LICENSE.TXT"
          #$DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "THROW_ERROR.TXT"
          echo "Destination License and Path is: "
          echo $DestinationLicensePath
          if(!(Test-Path -path $DestinationLicensePath) )
          {
              Write-Host "$DestinationLicensePath doesn't exist in compiled code."
              Exit 1
          }

          #Check to see if version in cli matches version in workflow input
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          echo "About to print acm cli version command output: "
          acm version
          echo "About to print version that was entered into the workflow input: "
          echo $env:VERSION
          #$myAcmVersion = acm version
          #echo "1About to print my AcmVersion value: "
          #echo $myAcmVersion
          #$myAcmVersion = (acm version) | Out-String
          #echo "2About to print my AcmVersion value: "
          #echo $myAcmVersion
          $myAcmVersion = "Throw_An_Error"
          echo "3About to print my AcmVersion value: "
          echo $myAcmVersion
          $myAcmVersion = [string](acm version)
          echo "4About to print my AcmVersion value: "
          echo $myAcmVersion

          if ($myAcmVersion -eq $env:VERSION)
          { 
              Write-Host "The version given by cli output matches the version given by workflow input.  This is the expected result."
          } 
          else 
          {
              Write-Host "ERROR: The version given by cli output does NOT match the version given by workflow input.  This is an error."
              Exit 1
          }
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_THREE }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_THREE }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import config file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\config.yaml', 'w') as config_file:
            config_file.write(os.environ['ACM_CONFIG'])
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
      - id: Acm_Setup_On_Windows
        uses: ./.github/actions/acm-setup-on-windows
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-arm.git
      - id: Acm_Foundation_On_Windows
        uses: ./.github/actions/acm-foundation-on-windows
        with:
          system_name: agents-arm
      - id: Acm_Services_On_Windows
        uses: ./.github/actions/acm-services-on-windows
        with:
          system_name: agents-arm
      - id: Acm_Services_Off_Windows
        uses: ./.github/actions/acm-services-off-windows
        with:
          system_name: agents-arm
      - id: Acm_ServiceType_On_Windows
        uses: ./.github/actions/acm-service-type-on-windows
        with:
          system_name: agents-arm
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceType_Off_Windows
        uses: ./.github/actions/acm-service-type-off-windows
        with:
          system_name: agents-arm
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceInstance_On_Windows
        uses: ./.github/actions/acm-service-instance-on-windows
        with:
          system_name: agents-arm
          service_type: subnetsWithScaleSet
          service_instance: azdoAgents
      - id: Acm_ServiceInstance_Off_Windows
        uses: ./.github/actions/acm-service-instance-off-windows
        with:
          system_name: agents-arm
          service_type: subnetsWithScaleSet
          service_instance: azdoAgents
      - id: Acm_Foundation_Off_Windows
        uses: ./.github/actions/acm-foundation-off-windows
        with:
          system_name: agents-arm
      - id: Acm_Setup_Off_Windows
        uses: ./.github/actions/acm-setup-off-windows
      - name: Delete Secrets
        run: |
          del "C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml"
          #del 'C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml'

  e2e-tests-windows-cloudformation-appliance:
    needs: [ release-linux-prerelease-version, release-windows-prerelease-version ]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - shell: pwsh
        name: Download and extract Release
        env:
          description: ${{ inputs.description }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}  
          version: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          $vers="windows-"+$env:VERSION
          $zipName="AgileCloudManager-"+$vers+".zip"
          echo "About to dir initially"
          dir
          $addressForCurl="https://download.agilecloudinstitute.io/"+$zipName
          echo "About to curl"
          curl -o $zipName $addressForCurl
          echo "About to dir after curl"
          dir
          echo "Done with dir"
          mkdir staging
          Expand-Archive $zipName -DestinationPath "staging"
          echo "About to dir staging"
          dir staging
          $folderName="AgileCloudManager-"+$vers
          $sourceFolderName="staging\\*"
          Copy-Item -Path $sourceFolderName -Recurse -Destination C:\\Users\\runneradmin\\acmhome\\ -Verbose
          echo "About to dir C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\Users\\runneradmin\\acmhome\\
          dir 

          #Check to see if LICENSE.TXT is inside the artifact that was just downloaded.
          $DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "LICENSE.TXT"
          #$DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "THROW_ERROR.TXT"
          echo "Destination License and Path is: "
          echo $DestinationLicensePath
          if(!(Test-Path -path $DestinationLicensePath) )
          {
              Write-Host "$DestinationLicensePath doesn't exist in compiled code."
              Exit 1
          }

          #Check to see if version in cli matches version in workflow input
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          echo "About to print acm cli version command output: "
          acm version
          echo "About to print version that was entered into the workflow input: "
          echo $env:VERSION
          #$myAcmVersion = acm version
          #echo "1About to print my AcmVersion value: "
          #echo $myAcmVersion
          #$myAcmVersion = (acm version) | Out-String
          #echo "2About to print my AcmVersion value: "
          #echo $myAcmVersion
          $myAcmVersion = "Throw_An_Error"
          echo "3About to print my AcmVersion value: "
          echo $myAcmVersion
          $myAcmVersion = [string](acm version)
          echo "4About to print my AcmVersion value: "
          echo $myAcmVersion

          if ($myAcmVersion -eq $env:VERSION)
          { 
              Write-Host "The version given by cli output matches the version given by workflow input.  This is the expected result."
          } 
          else 
          {
              Write-Host "ERROR: The version given by cli output does NOT match the version given by workflow input.  This is an error."
              Exit 1
          }
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_TWO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_TWO }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import config file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\config.yaml', 'w') as config_file:
            config_file.write(os.environ['ACM_CONFIG'])
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
      - id: Acm_Setup_On_Windows
        uses: ./.github/actions/acm-setup-on-windows
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-cloudformation.git
      - id: Acm_appliance_On_Windows
        uses: ./.github/actions/acm-appliance-on-windows
      - id: Acm_appliance_Off_Windows
        uses: ./.github/actions/acm-appliance-off-windows
      - id: Acm_Setup_Off_Windows
        uses: ./.github/actions/acm-setup-off-windows
      - name: Delete Secrets
        run: |
          del C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml
          #del C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml

  e2e-tests-windows-cloudformation-services:
    needs: [ release-linux-prerelease-version, release-windows-prerelease-version ]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - shell: pwsh
        name: Download and extract Release
        env:
          description: ${{ inputs.description }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}  
          version: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          $vers="windows-"+$env:VERSION
          $zipName="AgileCloudManager-"+$vers+".zip"
          echo "About to dir initially"
          dir
          $addressForCurl="https://download.agilecloudinstitute.io/"+$zipName
          echo "About to curl"
          curl -o $zipName $addressForCurl
          echo "About to dir after curl"
          dir
          echo "Done with dir"
          mkdir staging
          Expand-Archive $zipName -DestinationPath "staging"
          echo "About to dir staging"
          dir staging
          $folderName="AgileCloudManager-"+$vers
          $sourceFolderName="staging\\*"
          Copy-Item -Path $sourceFolderName -Recurse -Destination C:\\Users\\runneradmin\\acmhome\\ -Verbose
          echo "About to dir C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\Users\\runneradmin\\acmhome\\
          dir 

          #Check to see if LICENSE.TXT is inside the artifact that was just downloaded.
          $DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "LICENSE.TXT"
          #$DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "THROW_ERROR.TXT"
          echo "Destination License and Path is: "
          echo $DestinationLicensePath
          if(!(Test-Path -path $DestinationLicensePath) )
          {
              Write-Host "$DestinationLicensePath doesn't exist in compiled code."
              Exit 1
          }

          #Check to see if version in cli matches version in workflow input
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          echo "About to print acm cli version command output: "
          acm version
          echo "About to print version that was entered into the workflow input: "
          echo $env:VERSION
          #$myAcmVersion = acm version
          #echo "1About to print my AcmVersion value: "
          #echo $myAcmVersion
          #$myAcmVersion = (acm version) | Out-String
          #echo "2About to print my AcmVersion value: "
          #echo $myAcmVersion
          $myAcmVersion = "Throw_An_Error"
          echo "3About to print my AcmVersion value: "
          echo $myAcmVersion
          $myAcmVersion = [string](acm version)
          echo "4About to print my AcmVersion value: "
          echo $myAcmVersion

          if ($myAcmVersion -eq $env:VERSION)
          { 
              Write-Host "The version given by cli output matches the version given by workflow input.  This is the expected result."
          } 
          else 
          {
              Write-Host "ERROR: The version given by cli output does NOT match the version given by workflow input.  This is an error."
              Exit 1
          }
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_THREE }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_THREE }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import config file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\config.yaml', 'w') as config_file:
            config_file.write(os.environ['ACM_CONFIG'])
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
      - id: Acm_Setup_On_Windows
        uses: ./.github/actions/acm-setup-on-windows
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-cloudformation.git
      - id: Acm_Foundation_On_Windows
        uses: ./.github/actions/acm-foundation-on-windows
        with:
          system_name: cf-demo
      - id: Acm_Services_On_Windows
        uses: ./.github/actions/acm-services-on-windows
        with:
          system_name: cf-demo
      - id: Acm_Services_Off_Windows
        uses: ./.github/actions/acm-services-off-windows
        with:
          system_name: cf-demo
      - id: Acm_ServiceType_On_Windows
        uses: ./.github/actions/acm-service-type-on-windows
        with:
          system_name: cf-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceType_Off_Windows
        uses: ./.github/actions/acm-service-type-off-windows
        with:
          system_name: cf-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceInstance_On_Windows
        uses: ./.github/actions/acm-service-instance-on-windows
        with:
          system_name: cf-demo
          service_type: subnetsWithScaleSet
          service_instance: ec2-with-custom-imgx
      - id: Acm_ServiceInstance_Off_Windows
        uses: ./.github/actions/acm-service-instance-off-windows
        with:
          system_name: cf-demo
          service_type: subnetsWithScaleSet
          service_instance: ec2-with-custom-imgx
      - id: Acm_Foundation_Off_Windows
        uses: ./.github/actions/acm-foundation-off-windows
        with:
          system_name: cf-demo
      - id: Acm_Setup_Off_Windows
        uses: ./.github/actions/acm-setup-off-windows
      - name: Delete Secrets
        run: |
          del C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml
          #del C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml

  e2e-tests-windows-custom-services:
    needs: [ release-linux-prerelease-version, release-windows-prerelease-version ]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - shell: pwsh
        name: Download and extract Release
        env:
          description: ${{ inputs.description }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}  
          version: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          $vers="windows-"+$env:VERSION
          $zipName="AgileCloudManager-"+$vers+".zip"
          echo "About to dir initially"
          dir
          $addressForCurl="https://download.agilecloudinstitute.io/"+$zipName
          echo "About to curl"
          curl -o $zipName $addressForCurl
          echo "About to dir after curl"
          dir
          echo "Done with dir"
          mkdir staging
          Expand-Archive $zipName -DestinationPath "staging"
          echo "About to dir staging"
          dir staging
          $folderName="AgileCloudManager-"+$vers
          $sourceFolderName="staging\\*"
          Copy-Item -Path $sourceFolderName -Recurse -Destination C:\\Users\\runneradmin\\acmhome\\ -Verbose
          echo "About to dir C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\Users\\runneradmin\\acmhome\\
          dir 

          #Check to see if LICENSE.TXT is inside the artifact that was just downloaded.
          $DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "LICENSE.TXT"
          #$DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "THROW_ERROR.TXT"
          echo "Destination License and Path is: "
          echo $DestinationLicensePath
          if(!(Test-Path -path $DestinationLicensePath) )
          {
              Write-Host "$DestinationLicensePath doesn't exist in compiled code."
              Exit 1
          }

          #Check to see if version in cli matches version in workflow input
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          echo "About to print acm cli version command output: "
          acm version
          echo "About to print version that was entered into the workflow input: "
          echo $env:VERSION
          #$myAcmVersion = acm version
          #echo "1About to print my AcmVersion value: "
          #echo $myAcmVersion
          #$myAcmVersion = (acm version) | Out-String
          #echo "2About to print my AcmVersion value: "
          #echo $myAcmVersion
          $myAcmVersion = "Throw_An_Error"
          echo "3About to print my AcmVersion value: "
          echo $myAcmVersion
          $myAcmVersion = [string](acm version)
          echo "4About to print my AcmVersion value: "
          echo $myAcmVersion

          if ($myAcmVersion -eq $env:VERSION)
          { 
              Write-Host "The version given by cli output matches the version given by workflow input.  This is the expected result."
          } 
          else 
          {
              Write-Host "ERROR: The version given by cli output does NOT match the version given by workflow input.  This is an error."
              Exit 1
          }
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_THREE }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_THREE }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import config file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\config.yaml', 'w') as config_file:
            config_file.write(os.environ['ACM_CONFIG'])
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
      - id: Acm_Setup_On_Windows
        uses: ./.github/actions/acm-setup-on-windows
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom.git
      - id: Acm_Foundation_On_Windows
        uses: ./.github/actions/acm-foundation-on-windows
        with:
          system_name: custom-demo
      - id: Acm_Services_On_Windows
        uses: ./.github/actions/acm-services-on-windows
        with:
          system_name: custom-demo
      - id: Acm_Services_Off_Windows
        uses: ./.github/actions/acm-services-off-windows
        with:
          system_name: custom-demo
      - id: Acm_ServiceType_On_Windows
        uses: ./.github/actions/acm-service-type-on-windows
        with:
          system_name: custom-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceType_Off_Windows
        uses: ./.github/actions/acm-service-type-off-windows
        with:
          system_name: custom-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceInstance_On_Windows
        uses: ./.github/actions/acm-service-instance-on-windows
        with:
          system_name: custom-demo
          service_type: subnetsWithScaleSet
          service_instance: custom-scaleset
      - id: Acm_ServiceInstance_Off_Windows
        uses: ./.github/actions/acm-service-instance-off-windows
        with:
          system_name: custom-demo
          service_type: subnetsWithScaleSet
          service_instance: custom-scaleset
      - id: Acm_Foundation_Off_Windows
        uses: ./.github/actions/acm-foundation-off-windows
        with:
          system_name: custom-demo
      - id: Acm_Setup_Off_Windows
        uses: ./.github/actions/acm-setup-off-windows
      - name: Delete Secrets
        run: |
          del C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml
          #del C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml

  e2e-tests-windows-custom-appliance:
    needs: [ release-linux-prerelease-version, release-windows-prerelease-version ]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - shell: pwsh
        name: Download and extract Release
        env:
          description: ${{ inputs.description }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}  
          version: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          $vers="windows-"+$env:VERSION
          $zipName="AgileCloudManager-"+$vers+".zip"
          echo "About to dir initially"
          dir
          $addressForCurl="https://download.agilecloudinstitute.io/"+$zipName
          echo "About to curl"
          curl -o $zipName $addressForCurl
          echo "About to dir after curl"
          dir
          echo "Done with dir"
          mkdir staging
          Expand-Archive $zipName -DestinationPath "staging"
          echo "About to dir staging"
          dir staging
          $folderName="AgileCloudManager-"+$vers
          $sourceFolderName="staging\\*"
          Copy-Item -Path $sourceFolderName -Recurse -Destination C:\\Users\\runneradmin\\acmhome\\ -Verbose
          echo "About to dir C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\Users\\runneradmin\\acmhome\\
          dir 

          #Check to see if LICENSE.TXT is inside the artifact that was just downloaded.
          $DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "LICENSE.TXT"
          #$DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "THROW_ERROR.TXT"
          echo "Destination License and Path is: "
          echo $DestinationLicensePath
          if(!(Test-Path -path $DestinationLicensePath) )
          {
              Write-Host "$DestinationLicensePath doesn't exist in compiled code."
              Exit 1
          }

          #Check to see if version in cli matches version in workflow input
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          echo "About to print acm cli version command output: "
          acm version
          echo "About to print version that was entered into the workflow input: "
          echo $env:VERSION
          #$myAcmVersion = acm version
          #echo "1About to print my AcmVersion value: "
          #echo $myAcmVersion
          #$myAcmVersion = (acm version) | Out-String
          #echo "2About to print my AcmVersion value: "
          #echo $myAcmVersion
          $myAcmVersion = "Throw_An_Error"
          echo "3About to print my AcmVersion value: "
          echo $myAcmVersion
          $myAcmVersion = [string](acm version)
          echo "4About to print my AcmVersion value: "
          echo $myAcmVersion

          if ($myAcmVersion -eq $env:VERSION)
          { 
              Write-Host "The version given by cli output matches the version given by workflow input.  This is the expected result."
          } 
          else 
          {
              Write-Host "ERROR: The version given by cli output does NOT match the version given by workflow input.  This is an error."
              Exit 1
          }
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_TWO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_TWO }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import config file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\config.yaml', 'w') as config_file:
            config_file.write(os.environ['ACM_CONFIG'])
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
      - id: Acm_Setup_On_Windows
        uses: ./.github/actions/acm-setup-on-windows
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom.git
      - id: Acm_appliance_On_Windows
        uses: ./.github/actions/acm-appliance-on-windows
      - id: Acm_appliance_Off_Windows
        uses: ./.github/actions/acm-appliance-off-windows
      - id: Acm_Setup_Off_Windows
        uses: ./.github/actions/acm-setup-off-windows
      - name: Delete Secrets
        run: |
          del C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml
          #del C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml

  e2e-tests-windows-terraform-packer-appliance:
    needs: [ release-linux-prerelease-version, release-windows-prerelease-version ]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - shell: pwsh
        name: Download and extract Release
        env:
          description: ${{ inputs.description }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}  
          version: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          $vers="windows-"+$env:VERSION
          $zipName="AgileCloudManager-"+$vers+".zip"
          echo "About to dir initially"
          dir
          $addressForCurl="https://download.agilecloudinstitute.io/"+$zipName
          echo "About to curl"
          curl -o $zipName $addressForCurl
          echo "About to dir after curl"
          dir
          echo "Done with dir"
          mkdir staging
          Expand-Archive $zipName -DestinationPath "staging"
          echo "About to dir staging"
          dir staging
          $folderName="AgileCloudManager-"+$vers
          $sourceFolderName="staging\\*"
          Copy-Item -Path $sourceFolderName -Recurse -Destination C:\\Users\\runneradmin\\acmhome\\ -Verbose
          echo "About to dir C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\Users\\runneradmin\\acmhome\\
          dir 

          #Check to see if LICENSE.TXT is inside the artifact that was just downloaded.
          $DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "LICENSE.TXT"
          #$DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "THROW_ERROR.TXT"
          echo "Destination License and Path is: "
          echo $DestinationLicensePath
          if(!(Test-Path -path $DestinationLicensePath) )
          {
              Write-Host "$DestinationLicensePath doesn't exist in compiled code."
              Exit 1
          }

          #Check to see if version in cli matches version in workflow input
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          echo "About to print acm cli version command output: "
          acm version
          echo "About to print version that was entered into the workflow input: "
          echo $env:VERSION
          #$myAcmVersion = acm version
          #echo "1About to print my AcmVersion value: "
          #echo $myAcmVersion
          #$myAcmVersion = (acm version) | Out-String
          #echo "2About to print my AcmVersion value: "
          #echo $myAcmVersion
          $myAcmVersion = "Throw_An_Error"
          echo "3About to print my AcmVersion value: "
          echo $myAcmVersion
          $myAcmVersion = [string](acm version)
          echo "4About to print my AcmVersion value: "
          echo $myAcmVersion

          if ($myAcmVersion -eq $env:VERSION)
          { 
              Write-Host "The version given by cli output matches the version given by workflow input.  This is the expected result."
          } 
          else 
          {
              Write-Host "ERROR: The version given by cli output does NOT match the version given by workflow input.  This is an error."
              Exit 1
          }
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_TWO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_TWO }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import config file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\config.yaml', 'w') as config_file:
            config_file.write(os.environ['ACM_CONFIG'])
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
      - id: Acm_Setup_On_Windows
        uses: ./.github/actions/acm-setup-on-windows
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-terraform-packer.git
      - id: Acm_appliance_On_Windows
        uses: ./.github/actions/acm-appliance-on-windows
      - id: Acm_appliance_Off_Windows
        uses: ./.github/actions/acm-appliance-off-windows
      - id: Acm_Setup_Off_Windows
        uses: ./.github/actions/acm-setup-off-windows
      - name: Delete Secrets
        run: |
          del C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml
          #del C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml

  e2e-tests-windows-terraform-packer-services:
    needs: [ release-linux-prerelease-version, release-windows-prerelease-version ]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - shell: pwsh
        name: Download and extract Release
        env:
          description: ${{ inputs.description }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}  
          version: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          $vers="windows-"+$env:VERSION
          $zipName="AgileCloudManager-"+$vers+".zip"
          echo "About to dir initially"
          dir
          $addressForCurl="https://download.agilecloudinstitute.io/"+$zipName
          echo "About to curl"
          curl -o $zipName $addressForCurl
          echo "About to dir after curl"
          dir
          echo "Done with dir"
          mkdir staging
          Expand-Archive $zipName -DestinationPath "staging"
          echo "About to dir staging"
          dir staging
          $folderName="AgileCloudManager-"+$vers
          $sourceFolderName="staging\\*"
          Copy-Item -Path $sourceFolderName -Recurse -Destination C:\\Users\\runneradmin\\acmhome\\ -Verbose
          echo "About to dir C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\Users\\runneradmin\\acmhome\\
          dir 

          #Check to see if LICENSE.TXT is inside the artifact that was just downloaded.
          $DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "LICENSE.TXT"
          #$DestinationLicensePath = Join-Path -Path C:\\Users\\runneradmin\\acmhome\\ -ChildPath "THROW_ERROR.TXT"
          echo "Destination License and Path is: "
          echo $DestinationLicensePath
          if(!(Test-Path -path $DestinationLicensePath) )
          {
              Write-Host "$DestinationLicensePath doesn't exist in compiled code."
              Exit 1
          }

          #Check to see if version in cli matches version in workflow input
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          echo "About to print acm cli version command output: "
          acm version
          echo "About to print version that was entered into the workflow input: "
          echo $env:VERSION
          #$myAcmVersion = acm version
          #echo "1About to print my AcmVersion value: "
          #echo $myAcmVersion
          #$myAcmVersion = (acm version) | Out-String
          #echo "2About to print my AcmVersion value: "
          #echo $myAcmVersion
          $myAcmVersion = "Throw_An_Error"
          echo "3About to print my AcmVersion value: "
          echo $myAcmVersion
          $myAcmVersion = [string](acm version)
          echo "4About to print my AcmVersion value: "
          echo $myAcmVersion

          if ($myAcmVersion -eq $env:VERSION)
          { 
              Write-Host "The version given by cli output matches the version given by workflow input.  This is the expected result."
          } 
          else 
          {
              Write-Host "ERROR: The version given by cli output does NOT match the version given by workflow input.  This is an error."
              Exit 1
          }
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_THREE }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_THREE }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import config file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\config.yaml', 'w') as config_file:
            config_file.write(os.environ['ACM_CONFIG'])
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
      - id: Acm_Setup_On_Windows
        uses: ./.github/actions/acm-setup-on-windows
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-terraform-packer.git
      - id: Acm_ServiceType_On_Windows
        uses: ./.github/actions/acm-service-type-on-windows
        with:
          system_name: tfbackend
          service_type: tfBackend 
      - id: Acm_ServiceType_Off_Windows
        uses: ./.github/actions/acm-service-type-off-windows
        with:
          system_name: tfbackend
          service_type: tfBackend
      - id: Acm_ServiceInstance_On_Windows
        uses: ./.github/actions/acm-service-instance-on-windows
        with:
          system_name: tfbackend
          service_type: tfBackend
          service_instance: adminAccounts
      - id: Acm_ServiceInstance_Off_Windows
        uses: ./.github/actions/acm-service-instance-off-windows
        with:
          system_name: tfbackend
          service_type: tfBackend
          service_instance: adminAccounts
      - id: Acm_Services_On_tfbackend_Windows
        uses: ./.github/actions/acm-services-on-windows
        with:
          system_name: tfbackend
      - id: Acm_Foundation_On_Admin_Windows
        uses: ./.github/actions/acm-foundation-on-windows
        with:
          system_name: admin
      - id: Acm_Services_On_Admin_Windows
        uses: ./.github/actions/acm-services-on-windows
        with:
          system_name: admin
      - id: Acm_Foundation_On_Agents_Windows
        uses: ./.github/actions/acm-foundation-on-windows
        with:
          system_name: agents
      - id: Acm_Services_On_Agents_Windows
        uses: ./.github/actions/acm-services-on-windows
        with:
          system_name: agents
      - id: Acm_Services_Off_Agents_Windows
        uses: ./.github/actions/acm-services-off-windows
        with:
          system_name: agents
      - id: Acm_Foundation_Off_Agents_Windows
        uses: ./.github/actions/acm-foundation-off-windows
        with:
          system_name: agents
      - id: Acm_Services_Off_Admin_Windows
        uses: ./.github/actions/acm-services-off-windows
        with:
          system_name: admin
      - id: Acm_Foundation_Off_Admin_Windows
        uses: ./.github/actions/acm-foundation-off-windows
        with:
          system_name: admin
      - id: Acm_Services_Off_tfbackend_Windows
        uses: ./.github/actions/acm-services-off-windows
        with:
          system_name: tfbackend
      - id: Acm_Setup_Off_Windows
        uses: ./.github/actions/acm-setup-off-windows
      - name: Delete Secrets
        run: |
          del C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml
          #del C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml

  e2e-tests-linux-custom-gitlab-appliance:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}
        run: |
          nameOfRelease="AgileCloudManager-linux-"$VERSION
          vers="linux-"$VERSION
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          nameOfTar=$nameOfRelease".tar.gz"
          echo "About to print nameOfTar"
          echo $nameOfTar
          #Start of wget version
          echo "About to ls -al initially"
          ls -al
          addressForWget="https://download.agilecloudinstitute.io/"$nameOfTar
          echo "About to wget"
          wget $addressForWget
          echo "About to ls -al after wget"
          ls -al
          echo "Done with ls -al"
          
          mkdir -p /home/runner/acmhome/
          mv $nameOfTar /home/runner/acmhome/
          cd /home/runner/acmhome/
          tar -xvf $nameOfTar
          rm $nameOfTar
          echo "About to ls -al /home/runner/acmhome/ after extracting tarball"
          ls -al
          PATH=$PATH:/home/runner/acmhome/;export PATH

          #...................................
          #Check to see if license is present in compiled app
          mypath=`pwd`
          echo "value of my path is: "
          echo $mypath
          licenseAndPath="$mypath""/LICENSE.TXT"
          echo "licenseAndPath is: "  
          echo $licenseAndPath  
          cat $licenseAndPath | while read line; do echo "$line"; done
          #licenseAndPath="notarealfile.txt"
          #echo "licenseAndPath2 is: "  
          #echo $licenseAndPath  

          if [ ! -e "$licenseAndPath" ]           
          then 
              echo "license is not present, so throwing an error" >&2
              exit 1
          else
              echo "Found File $licenseAndPath"
          fi

          echo "About to check acm version"
          acm version
          echo "version input from workflow is: "
          echo $VERSION
          myAcmVers=$(acm version)
          echo "my acmVersion is: "
          echo "$myAcmVers"
          if [[ "$myAcmVers" = "$VERSION" ]] 
          then
            echo "version of acm matches version given as workflow input."
          else
            echo "ERROR: The version of acm given as workflow input does not match the version output by the cli."
            exit 1
          fi
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ZERO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ZERO }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom-gitlab.git
      - id: Acm_appliance_On_Ubuntu
        uses: ./.github/actions/acm-appliance-on-ubuntu
      - id: Acm_appliance_Off_Ubuntu
        uses: ./.github/actions/acm-appliance-off-ubuntu
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-linux-custom-azdo-appliance:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}
        run: |
          nameOfRelease="AgileCloudManager-linux-"$VERSION
          vers="linux-"$VERSION
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          nameOfTar=$nameOfRelease".tar.gz"
          echo "About to print nameOfTar"
          echo $nameOfTar
          #Start of wget version
          echo "About to ls -al initially"
          ls -al
          addressForWget="https://download.agilecloudinstitute.io/"$nameOfTar
          echo "About to wget"
          wget $addressForWget
          echo "About to ls -al after wget"
          ls -al
          echo "Done with ls -al"
          
          mkdir -p /home/runner/acmhome/
          mv $nameOfTar /home/runner/acmhome/
          cd /home/runner/acmhome/
          tar -xvf $nameOfTar
          rm $nameOfTar
          echo "About to ls -al /home/runner/acmhome/ after extracting tarball"
          ls -al
          PATH=$PATH:/home/runner/acmhome/;export PATH

          #...................................
          #Check to see if license is present in compiled app
          mypath=`pwd`
          echo "value of my path is: "
          echo $mypath
          licenseAndPath="$mypath""/LICENSE.TXT"
          echo "licenseAndPath is: "  
          echo $licenseAndPath  
          cat $licenseAndPath | while read line; do echo "$line"; done
          #licenseAndPath="notarealfile.txt"
          #echo "licenseAndPath2 is: "  
          #echo $licenseAndPath  

          if [ ! -e "$licenseAndPath" ]           
          then 
              echo "license is not present, so throwing an error" >&2
              exit 1
          else
              echo "Found File $licenseAndPath"
          fi

          echo "About to check acm version"
          acm version
          echo "version input from workflow is: "
          echo $VERSION
          myAcmVers=$(acm version)
          echo "my acmVersion is: "
          echo "$myAcmVers"
          if [[ "$myAcmVers" = "$VERSION" ]] 
          then
            echo "version of acm matches version given as workflow input."
          else
            echo "ERROR: The version of acm given as workflow input does not match the version output by the cli."
            exit 1
          fi
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ZERO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ZERO }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom-azdo.git
      - id: Acm_appliance_On_Ubuntu
        uses: ./.github/actions/acm-appliance-on-ubuntu
      - id: Acm_appliance_Off_Ubuntu
        uses: ./.github/actions/acm-appliance-off-ubuntu
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-linux-custom-private-appliance:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}
        run: |
          nameOfRelease="AgileCloudManager-linux-"$VERSION
          vers="linux-"$VERSION
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          nameOfTar=$nameOfRelease".tar.gz"
          echo "About to print nameOfTar"
          echo $nameOfTar
          #Start of wget version
          echo "About to ls -al initially"
          ls -al
          addressForWget="https://download.agilecloudinstitute.io/"$nameOfTar
          echo "About to wget"
          wget $addressForWget
          echo "About to ls -al after wget"
          ls -al
          echo "Done with ls -al"
          
          mkdir -p /home/runner/acmhome/
          mv $nameOfTar /home/runner/acmhome/
          cd /home/runner/acmhome/
          tar -xvf $nameOfTar
          rm $nameOfTar
          echo "About to ls -al /home/runner/acmhome/ after extracting tarball"
          ls -al
          PATH=$PATH:/home/runner/acmhome/;export PATH

          #...................................
          #Check to see if license is present in compiled app
          mypath=`pwd`
          echo "value of my path is: "
          echo $mypath
          licenseAndPath="$mypath""/LICENSE.TXT"
          echo "licenseAndPath is: "  
          echo $licenseAndPath  
          cat $licenseAndPath | while read line; do echo "$line"; done
          #licenseAndPath="notarealfile.txt"
          #echo "licenseAndPath2 is: "  
          #echo $licenseAndPath  

          if [ ! -e "$licenseAndPath" ]           
          then 
              echo "license is not present, so throwing an error" >&2
              exit 1
          else
              echo "Found File $licenseAndPath"
          fi

          echo "About to check acm version"
          acm version
          echo "version input from workflow is: "
          echo $VERSION
          myAcmVers=$(acm version)
          echo "my acmVersion is: "
          echo "$myAcmVers"
          if [[ "$myAcmVers" = "$VERSION" ]] 
          then
            echo "version of acm matches version given as workflow input."
          else
            echo "ERROR: The version of acm given as workflow input does not match the version output by the cli."
            exit 1
          fi
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ZERO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ZERO }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom-private.git
      - id: Acm_appliance_On_Ubuntu
        uses: ./.github/actions/acm-appliance-on-ubuntu
      - id: Acm_appliance_Off_Ubuntu
        uses: ./.github/actions/acm-appliance-off-ubuntu
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-linux-custom-ingitlab-appliance:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}
        run: |
          nameOfRelease="AgileCloudManager-linux-"$VERSION
          vers="linux-"$VERSION
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          nameOfTar=$nameOfRelease".tar.gz"
          echo "About to print nameOfTar"
          echo $nameOfTar
          #Start of wget version
          echo "About to ls -al initially"
          ls -al
          addressForWget="https://download.agilecloudinstitute.io/"$nameOfTar
          echo "About to wget"
          wget $addressForWget
          echo "About to ls -al after wget"
          ls -al
          echo "Done with ls -al"
          
          mkdir -p /home/runner/acmhome/
          mv $nameOfTar /home/runner/acmhome/
          cd /home/runner/acmhome/
          tar -xvf $nameOfTar
          rm $nameOfTar
          echo "About to ls -al /home/runner/acmhome/ after extracting tarball"
          ls -al
          PATH=$PATH:/home/runner/acmhome/;export PATH

          #...................................
          #Check to see if license is present in compiled app
          mypath=`pwd`
          echo "value of my path is: "
          echo $mypath
          licenseAndPath="$mypath""/LICENSE.TXT"
          echo "licenseAndPath is: "  
          echo $licenseAndPath  
          cat $licenseAndPath | while read line; do echo "$line"; done
          #licenseAndPath="notarealfile.txt"
          #echo "licenseAndPath2 is: "  
          #echo $licenseAndPath  

          if [ ! -e "$licenseAndPath" ]           
          then 
              echo "license is not present, so throwing an error" >&2
              exit 1
          else
              echo "Found File $licenseAndPath"
          fi

          echo "About to check acm version"
          acm version
          echo "version input from workflow is: "
          echo $VERSION
          myAcmVers=$(acm version)
          echo "my acmVersion is: "
          echo "$myAcmVers"
          if [[ "$myAcmVers" = "$VERSION" ]] 
          then
            echo "version of acm matches version given as workflow input."
          else
            echo "ERROR: The version of acm given as workflow input does not match the version output by the cli."
            exit 1
          fi
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ZERO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ZERO }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://gitlab.com/agilecloudinstitute1/acm-demo-custom.git
      - id: Acm_appliance_On_Ubuntu
        uses: ./.github/actions/acm-appliance-on-ubuntu
      - id: Acm_appliance_Off_Ubuntu
        uses: ./.github/actions/acm-appliance-off-ubuntu
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-linux-custom-inazdo-appliance:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}
        run: |
          nameOfRelease="AgileCloudManager-linux-"$VERSION
          vers="linux-"$VERSION
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          nameOfTar=$nameOfRelease".tar.gz"
          echo "About to print nameOfTar"
          echo $nameOfTar
          #Start of wget version
          echo "About to ls -al initially"
          ls -al
          addressForWget="https://download.agilecloudinstitute.io/"$nameOfTar
          echo "About to wget"
          wget $addressForWget
          echo "About to ls -al after wget"
          ls -al
          echo "Done with ls -al"
          
          mkdir -p /home/runner/acmhome/
          mv $nameOfTar /home/runner/acmhome/
          cd /home/runner/acmhome/
          tar -xvf $nameOfTar
          rm $nameOfTar
          echo "About to ls -al /home/runner/acmhome/ after extracting tarball"
          ls -al
          PATH=$PATH:/home/runner/acmhome/;export PATH

          #...................................
          #Check to see if license is present in compiled app
          mypath=`pwd`
          echo "value of my path is: "
          echo $mypath
          licenseAndPath="$mypath""/LICENSE.TXT"
          echo "licenseAndPath is: "  
          echo $licenseAndPath  
          cat $licenseAndPath | while read line; do echo "$line"; done
          #licenseAndPath="notarealfile.txt"
          #echo "licenseAndPath2 is: "  
          #echo $licenseAndPath  

          if [ ! -e "$licenseAndPath" ]           
          then 
              echo "license is not present, so throwing an error" >&2
              exit 1
          else
              echo "Found File $licenseAndPath"
          fi

          echo "About to check acm version"
          acm version
          echo "version input from workflow is: "
          echo $VERSION
          myAcmVers=$(acm version)
          echo "my acmVersion is: "
          echo "$myAcmVers"
          if [[ "$myAcmVers" = "$VERSION" ]] 
          then
            echo "version of acm matches version given as workflow input."
          else
            echo "ERROR: The version of acm given as workflow input does not match the version output by the cli."
            exit 1
          fi
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ZERO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ZERO }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://dev.azure.com/AutomationDevTest/acm-demo-custom/_git/acm-demo-custom
      - id: Acm_appliance_On_Ubuntu
        uses: ./.github/actions/acm-appliance-on-ubuntu
      - id: Acm_appliance_Off_Ubuntu
        uses: ./.github/actions/acm-appliance-off-ubuntu
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  get-checksum-linux:
    needs: [e2e-tests-linux-terraform-packer-appliance,  e2e-tests-linux-terraform-packer-services,  e2e-tests-linux-arm-appliance,  e2e-tests-linux-arm-services,  e2e-tests-linux-cloudformation-appliance,  e2e-tests-linux-cloudformation-services,  e2e-tests-linux-custom-appliance,  e2e-tests-linux-custom-services,  e2e-tests-windows-arm-appliance,  e2e-tests-windows-arm-services,  e2e-tests-windows-cloudformation-appliance,  e2e-tests-windows-cloudformation-services,  e2e-tests-windows-custom-services,  e2e-tests-windows-custom-appliance,  e2e-tests-windows-terraform-packer-appliance,  e2e-tests-windows-terraform-packer-services,  e2e-tests-linux-custom-gitlab-appliance,  e2e-tests-linux-custom-azdo-appliance,  e2e-tests-linux-custom-private-appliance,  e2e-tests-linux-custom-ingitlab-appliance,  e2e-tests-linux-custom-inazdo-appliance]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: python
        name: Download and make checksum
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}
        run: |
          import os
          import requests
          nameOfRelease="AgileCloudManager-linux-"+os.environ.get("VERSION")
          vers="linux-"+os.environ.get("VERSION")
          print("About to print version")
          print(vers)
          nameOfRelease="AgileCloudManager-"+vers
          print("About to print name of release")
          print(nameOfRelease) 
          print("About to create release")
          nameOfTar=nameOfRelease+".tar.gz"
          print("About to print nameOfTar")
          print(nameOfTar)
          #Start of wget version
          print("About to ls -al initially")
          print(os.listdir())
          addressForWget="https://download.agilecloudinstitute.io/"+nameOfTar
          print("About to wget")

          with requests.get(addressForWget, stream=True) as r:
              r.raise_for_status()
              with open(nameOfTar, 'wb') as f:
                  for chunk in r.iter_content(chunk_size=8192): 
                      # If you have chunk encoded response uncomment if
                      # and set chunk_size parameter to None.
                      #if chunk: 
                      f.write(chunk)
 
          print("About to ls -al after wget")
          print(os.listdir())
          print("Done with ls -al")

          print("About to make checksum")
          import hashlib
          import os
          print("About to print current directory.")
          print(f"pwd={os.getcwd()}")
          print(os.getcwd())

          #nameOfTar="AgileCloudManager-linux-"+os.environ.get("VERSION")+".tar.gz"
          #print("About to print nameOfTar")
          #print(nameOfTar)
          print("About to print contents of current directory ")
          os.listdir(".")
          if os.path.isfile(nameOfTar):
            with open(nameOfTar, "rb") as f:
              file_hash = hashlib.md5()
              while chunk := f.read(8192):
                  file_hash.update(chunk)
            #print(file_hash.digest())
            print("The Checksum for the linux tar is: ")
            print(file_hash.hexdigest())  # to get a printable str instead of bytes
          else: 
            errMess = "There is no file named "+nameOfTar+" in /home/runner/acmhome/" 
            raise ValueError(errMess)


          #mkdir -p /home/runner/acmhome/
          #mv $nameOfTar /home/runner/acmhome/
          #cd /home/runner/acmhome/
          #echo "About to list contents of /home/runner/acmhome/ "
          #ls -al

  get-checksum-windows:
    needs: [e2e-tests-linux-terraform-packer-appliance,  e2e-tests-linux-terraform-packer-services,  e2e-tests-linux-arm-appliance,  e2e-tests-linux-arm-services,  e2e-tests-linux-cloudformation-appliance,  e2e-tests-linux-cloudformation-services,  e2e-tests-linux-custom-appliance,  e2e-tests-linux-custom-services,  e2e-tests-windows-arm-appliance,  e2e-tests-windows-arm-services,  e2e-tests-windows-cloudformation-appliance,  e2e-tests-windows-cloudformation-services,  e2e-tests-windows-custom-services,  e2e-tests-windows-custom-appliance,  e2e-tests-windows-terraform-packer-appliance,  e2e-tests-windows-terraform-packer-services,  e2e-tests-linux-custom-gitlab-appliance,  e2e-tests-linux-custom-azdo-appliance,  e2e-tests-linux-custom-private-appliance,  e2e-tests-linux-custom-ingitlab-appliance,  e2e-tests-linux-custom-inazdo-appliance]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3 
      - id: ConfigureWindowsAgent 
        uses: ./.github/actions/windows-provisioner
      - shell: python
        name: Download and make checksum
        env:
          description: ${{ inputs.description }}
          RELEASE_BUCKET_NAME: ${{ inputs.RELEASE_BUCKET_NAME }}  
          version: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          import os
          import requests
          vers="windows-"+os.environ.get("VERSION")
          zipName="AgileCloudManager-"+vers+".zip"
          print("About to dir initially")
          print(os.listdir())
          addressForCurl="https://download.agilecloudinstitute.io/"+zipName
          print("addressForCurl is: ", addressForCurl)
          print("About to curl")
          with requests.get(addressForCurl, stream=True) as r:
              r.raise_for_status()
              with open(zipName, 'wb') as f:
                  for chunk in r.iter_content(chunk_size=8192): 
                      # If you have chunk encoded response uncomment if
                      # and set chunk_size parameter to None.
                      #if chunk: 
                      f.write(chunk)
          print("About to dir after curl")
          print(os.listdir())
          print("Done with dir")

          import hashlib
          import os
          print("About to print pwd")
          print(f"pwd={os.getcwd()}")
          print(os.getcwd())

          #nameOfTar="AgileCloudManager-windows-"+os.environ.get("VERSION")+".zip"
          #print("About to print nameOfTar")
          #print(nameOfTar)
          print("About to print contents of current directory ")
          os.listdir(".")
          if os.path.isfile(zipName):
            with open(zipName, "rb") as f:
              file_hash = hashlib.md5()
              while chunk := f.read(8192):
                  file_hash.update(chunk)
            print(file_hash.digest())
            print("Checksum for the windows release zip is: ")
            print(file_hash.hexdigest())  # to get a printable str instead of bytes
          else: 
            errMess = "There is no file named "+nameOfTar+" in "+os.getcwd()
            raise ValueError(errMess)

  e2e-tests-linux-custom-api-private-appliance:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ExpandUbuntuArtifact
        uses: ./.github/actions/ubuntu-artifact-expander
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ZERO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ZERO }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom-api.git
      - id: Acm_appliance_On_Ubuntu
        uses: ./.github/actions/acm-appliance-on-ubuntu
      - id: Acm_appliance_Off_Ubuntu
        uses: ./.github/actions/acm-appliance-off-ubuntu
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-linux-custom-api-appliance:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ExpandUbuntuArtifact
        uses: ./.github/actions/ubuntu-artifact-expander
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ZERO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ZERO }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom-api.git
      - id: Acm_appliance_On_Ubuntu
        uses: ./.github/actions/acm-appliance-on-ubuntu
      - id: Acm_appliance_Off_Ubuntu
        uses: ./.github/actions/acm-appliance-off-ubuntu
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-linux-custom-api-services:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ExpandUbuntuArtifact
        uses: ./.github/actions/ubuntu-artifact-expander
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ONE }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ONE }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom-api.git
      - id: Acm_Foundation_On_Ubuntu
        uses: ./.github/actions/acm-foundation-on-ubuntu
        with:
          system_name: custom-api-demo
      - id: Acm_Services_On_Ubuntu
        uses: ./.github/actions/acm-services-on-ubuntu
        with:
          system_name: custom-api-demo
      - id: Acm_Services_Off_Ubuntu
        uses: ./.github/actions/acm-services-off-ubuntu
        with:
          system_name: custom-api-demo
      - id: Acm_ServiceType_On_Ubuntu
        uses: ./.github/actions/acm-service-type-on-ubuntu
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceType_Off_Ubuntu
        uses: ./.github/actions/acm-service-type-off-ubuntu
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceInstance_On_Ubuntu
        uses: ./.github/actions/acm-service-instance-on-ubuntu
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
          service_instance: custom-scaleset
      - id: Acm_ServiceInstance_Off_Ubuntu
        uses: ./.github/actions/acm-service-instance-off-ubuntu
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
          service_instance: custom-scaleset
      - id: Acm_Foundation_Off_Ubuntu
        uses: ./.github/actions/acm-foundation-off-ubuntu
        with:
          system_name: custom-api-demo
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-windows-custom-api-services:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - id: CompileAppForWindows
        uses: ./.github/actions/app-compiler-windows
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_THREE }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_THREE }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import config file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\config.yaml', 'w') as config_file:
            config_file.write(os.environ['ACM_CONFIG'])
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
      - id: Acm_Setup_On_Windows
        uses: ./.github/actions/acm-setup-on-windows
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom-api.git
      - id: Acm_Foundation_On_Windows
        uses: ./.github/actions/acm-foundation-on-windows
        with:
          system_name: custom-api-demo
      - id: Acm_Services_On_Windows
        uses: ./.github/actions/acm-services-on-windows
        with:
          system_name: custom-api-demo
      - id: Acm_Services_Off_Windows
        uses: ./.github/actions/acm-services-off-windows
        with:
          system_name: custom-api-demo
      - id: Acm_ServiceType_On_Windows
        uses: ./.github/actions/acm-service-type-on-windows
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceType_Off_Windows
        uses: ./.github/actions/acm-service-type-off-windows
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceInstance_On_Windows
        uses: ./.github/actions/acm-service-instance-on-windows
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
          service_instance: custom-scaleset
      - id: Acm_ServiceInstance_Off_Windows
        uses: ./.github/actions/acm-service-instance-off-windows
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
          service_instance: custom-scaleset
      - id: Acm_Foundation_Off_Windows
        uses: ./.github/actions/acm-foundation-off-windows
        with:
          system_name: custom-api-demo
      - id: Acm_Setup_Off_Windows
        uses: ./.github/actions/acm-setup-off-windows
      - name: Delete Secrets
        run: |
          del C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml

  e2e-tests-windows-custom-api-appliance:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - id: CompileAppForWindows
        uses: ./.github/actions/app-compiler-windows
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_TWO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_TWO }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import config file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\config.yaml', 'w') as config_file:
            config_file.write(os.environ['ACM_CONFIG'])
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
      - id: Acm_Setup_On_Windows
        uses: ./.github/actions/acm-setup-on-windows
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom-api.git
      - id: Acm_appliance_On_Windows
        uses: ./.github/actions/acm-appliance-on-windows
      - id: Acm_appliance_Off_Windows
        uses: ./.github/actions/acm-appliance-off-windows
      - id: Acm_Setup_Off_Windows
        uses: ./.github/actions/acm-setup-off-windows
      - name: Delete Secrets
        run: |
          del C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml

  e2e-tests-linux-custom-api-private-appliance:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ExpandUbuntuArtifact
        uses: ./.github/actions/ubuntu-artifact-expander
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ZERO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ZERO }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom-api.git
      - id: Acm_appliance_On_Ubuntu
        uses: ./.github/actions/acm-appliance-on-ubuntu
      - id: Acm_appliance_Off_Ubuntu
        uses: ./.github/actions/acm-appliance-off-ubuntu
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-linux-custom-api-appliance:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ExpandUbuntuArtifact
        uses: ./.github/actions/ubuntu-artifact-expander
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ZERO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ZERO }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom-api.git
      - id: Acm_appliance_On_Ubuntu
        uses: ./.github/actions/acm-appliance-on-ubuntu
      - id: Acm_appliance_Off_Ubuntu
        uses: ./.github/actions/acm-appliance-off-ubuntu
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-linux-custom-api-services:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ExpandUbuntuArtifact
        uses: ./.github/actions/ubuntu-artifact-expander
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_ONE }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_ONE }}
        run: | 
          echo "$ACM_CONFIG" > /usr/acm/keys/starter/config.yaml
          echo "$ACM_SECRET" > /usr/acm/keys/starter/keys.yaml
      - id: Acm_Setup_On_Ubuntu
        uses: ./.github/actions/acm-setup-on-ubuntu
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom-api.git
      - id: Acm_Foundation_On_Ubuntu
        uses: ./.github/actions/acm-foundation-on-ubuntu
        with:
          system_name: custom-api-demo
      - id: Acm_Services_On_Ubuntu
        uses: ./.github/actions/acm-services-on-ubuntu
        with:
          system_name: custom-api-demo
      - id: Acm_Services_Off_Ubuntu
        uses: ./.github/actions/acm-services-off-ubuntu
        with:
          system_name: custom-api-demo
      - id: Acm_ServiceType_On_Ubuntu
        uses: ./.github/actions/acm-service-type-on-ubuntu
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceType_Off_Ubuntu
        uses: ./.github/actions/acm-service-type-off-ubuntu
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceInstance_On_Ubuntu
        uses: ./.github/actions/acm-service-instance-on-ubuntu
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
          service_instance: custom-scaleset
      - id: Acm_ServiceInstance_Off_Ubuntu
        uses: ./.github/actions/acm-service-instance-off-ubuntu
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
          service_instance: custom-scaleset
      - id: Acm_Foundation_Off_Ubuntu
        uses: ./.github/actions/acm-foundation-off-ubuntu
        with:
          system_name: custom-api-demo
      - id: Acm_Setup_Off_Ubuntu
        uses: ./.github/actions/acm-setup-off-ubuntu
      - shell: bash
        name: Delete Secrets
        run: |
          rm /usr/acm/keys/starter/keys.yaml

  e2e-tests-windows-custom-api-services:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - id: CompileAppForWindows
        uses: ./.github/actions/app-compiler-windows
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_THREE }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_THREE }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import config file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\config.yaml', 'w') as config_file:
            config_file.write(os.environ['ACM_CONFIG'])
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
      - id: Acm_Setup_On_Windows
        uses: ./.github/actions/acm-setup-on-windows
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom-api.git
      - id: Acm_Foundation_On_Windows
        uses: ./.github/actions/acm-foundation-on-windows
        with:
          system_name: custom-api-demo
      - id: Acm_Services_On_Windows
        uses: ./.github/actions/acm-services-on-windows
        with:
          system_name: custom-api-demo
      - id: Acm_Services_Off_Windows
        uses: ./.github/actions/acm-services-off-windows
        with:
          system_name: custom-api-demo
      - id: Acm_ServiceType_On_Windows
        uses: ./.github/actions/acm-service-type-on-windows
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceType_Off_Windows
        uses: ./.github/actions/acm-service-type-off-windows
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
      - id: Acm_ServiceInstance_On_Windows
        uses: ./.github/actions/acm-service-instance-on-windows
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
          service_instance: custom-scaleset
      - id: Acm_ServiceInstance_Off_Windows
        uses: ./.github/actions/acm-service-instance-off-windows
        with:
          system_name: custom-api-demo
          service_type: subnetsWithScaleSet
          service_instance: custom-scaleset
      - id: Acm_Foundation_Off_Windows
        uses: ./.github/actions/acm-foundation-off-windows
        with:
          system_name: custom-api-demo
      - id: Acm_Setup_Off_Windows
        uses: ./.github/actions/acm-setup-off-windows
      - name: Delete Secrets
        run: |
          del C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml

  e2e-tests-windows-custom-api-appliance:
    needs: [release-linux-prerelease-version, release-windows-prerelease-version]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - id: CompileAppForWindows
        uses: ./.github/actions/app-compiler-windows
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO_TWO }}
          ACM_CONFIG: ${{ secrets.ACM_CONFIG_TWO }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import config file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\config.yaml', 'w') as config_file:
            config_file.write(os.environ['ACM_CONFIG'])
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
      - id: Acm_Setup_On_Windows
        uses: ./.github/actions/acm-setup-on-windows
        with:
          repo_url: https://github.com/AgileCloudInstitute/acm-demo-custom-api.git
      - id: Acm_appliance_On_Windows
        uses: ./.github/actions/acm-appliance-on-windows
      - id: Acm_appliance_Off_Windows
        uses: ./.github/actions/acm-appliance-off-windows
      - id: Acm_Setup_Off_Windows
        uses: ./.github/actions/acm-setup-off-windows
      - name: Delete Secrets
        run: |
          del C:\\Users\\runneradmin\\acm\\keys\\starter\\keys.yaml
