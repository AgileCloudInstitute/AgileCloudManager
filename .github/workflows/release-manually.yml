name: release-manually
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true
        type: string
      description:
        description: 'Description of release'
        required: true
        type: string
jobs:
  release-linux-prerelease-version:
    runs-on: ubuntu-latest
    steps:
      - shell: bash
        name: Pre-Release
        env:
          DESCRIPTION: ${{ inputs.description }}
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          vers="linux-"$VERSION
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/AgileCloudInstitute/AgileCloudManager/releases \
            -f tag_name=$vers \
            -f target_commitish='release-linux' \
            -f name=$nameOfRelease \
            -f body="$DESCRIPTION" \
            -F draft=false \
            -F prerelease=true \
            -F generate_release_notes=false 
  release-windows-prerelease-version:
    runs-on: windows-latest
    steps:
      - shell: pwsh
        name: Release
        env:
          DESCRIPTION: ${{ inputs.description }}
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          $vers="windows-"+$env:VERSION
          echo "About to print version"
          echo $vers
          $nameOfRelease="AgileCloudManager-"+$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          gh api --method POST -H "Accept: application/vnd.github+json" /repos/AgileCloudInstitute/AgileCloudManager/releases -f tag_name=$vers -f target_commitish='release-windows' -f name=$nameOfRelease -f body="$env:DESCRIPTION" -F draft=false -F prerelease=true -F generate_release_notes=false 
  e2e-tests-linux-arm:
    needs: [release-linux-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          vers="linux-"$VERSION
          repoWithToken="https://"$GH_TOKEN"@github.com/AgileCloudInstitute/AgileCloudManager"
          echo "About to download release"
          gh release download $vers --archive tar.gz --repo $repoWithToken
          mkdir /home/runner/acmhome
          sudo chown runner:runner /home/runner/acmhome
          folderName="AgileCloudManager-"$vers
          tarName=$folderName".tar.gz"
          tar -xvf $tarName
          folderNameSlash=$folderName"/*"
          rm $tarName
          cp -r $folderNameSlash /home/runner/acmhome/
          cd /home/runner/acmhome
          echo "About to list contents of /home/runner/acmhome after untar"
          ls -al
          PATH=$PATH:/home/runner/acmhome;export PATH

          git clone https://github.com/zrax/pycdc
          cd pycdc
          cmake .
          make
          make checks
          python pycdc C:\Users\Bobby\example.pyc


      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO }}
          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
        run: | 
          echo "$ACM_SECRET" > /home/runner/acmconfig/keys.yaml
          echo "$ACM_SECOND" > /usr/acm/keys/adminAccounts/keys.yaml
          echo "About to print out contents of /home/runner/acmconfig/keys.yaml "
          cat /home/runner/acmconfig/keys.yaml
      - name: Setup On
        shell: bash
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          sudo mkdir /home/runner/testdir
          sudo chown runner:runner /home/runner/testdir
          cd /home/runner/testdir
          echo 'About to setup on'
          acm setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-arm.git
          echo "........................About to ls -al "
          ls -al 
      - shell: bash
        name: Run platform on
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          echo ".................about to run e2e test"
          acm platform on
      - shell: bash
        name: Run platform off
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          echo ".................about to run e2e test"
          acm platform off
      - name: Setup Off
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          echo '........................About to setup off'
          acm setup off
          echo "........................About to ls -al"
          ls -al
      - shell: bash
        name: Delete Secrets
        run: |
          rm /home/runner/acmconfig/keys.yaml
  e2e-tests-linux-cloudformation:
    needs: [release-linux-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          vers="linux-"$VERSION
          repoWithToken="https://"$GH_TOKEN"@github.com/AgileCloudInstitute/AgileCloudManager"
          echo "About to download release"
          gh release download $vers --archive tar.gz --repo $repoWithToken
          mkdir /home/runner/acmhome
          sudo chown runner:runner /home/runner/acmhome
          folderName="AgileCloudManager-"$vers
          tarName=$folderName".tar.gz"
          tar -xvf $tarName
          folderNameSlash=$folderName"/*"
          rm $tarName
          cp -r $folderNameSlash /home/runner/acmhome/
          cd /home/runner/acmhome
          echo "About to list contents of /home/runner/acmhome after untar"
          ls -al
          PATH=$PATH:/home/runner/acmhome;export PATH
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO }}
          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
        run: | 
          echo "$ACM_SECRET" > /home/runner/acmconfig/keys.yaml
          echo "$ACM_SECOND" > /usr/acm/keys/adminAccounts/keys.yaml
      - name: Setup On
        shell: bash
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          sudo mkdir /home/runner/testdir
          sudo chown runner:runner /home/runner/testdir
          cd /home/runner/testdir
          echo 'About to setup on'
          acm setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-cf.git
          echo "........................About to ls -al "
          ls -al 
      - shell: bash
        name: Run platform on
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          echo ".................about to run e2e test"
          acm platform on
      - shell: bash
        name: Run platform off
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          echo ".................about to run e2e test"
          acm platform off
      - name: Setup Off
        shell: bash
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          echo '........................About to setup off'
          acm setup off
          echo "........................About to ls -al"
          ls -al
      - shell: bash
        name: Delete Secrets
        run: |
          rm /home/runner/acmconfig/keys.yaml
  e2e-tests-linux-custom:
    needs: [release-linux-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          vers="linux-"$VERSION
          repoWithToken="https://"$GH_TOKEN"@github.com/AgileCloudInstitute/AgileCloudManager"
          echo "About to download release"
          gh release download $vers --archive tar.gz --repo $repoWithToken
          mkdir /home/runner/acmhome
          sudo chown runner:runner /home/runner/acmhome
          folderName="AgileCloudManager-"$vers
          tarName=$folderName".tar.gz"
          tar -xvf $tarName
          folderNameSlash=$folderName"/*"
          rm $tarName
          cp -r $folderNameSlash /home/runner/acmhome/
          cd /home/runner/acmhome
          echo "About to list contents of /home/runner/acmhome after untar"
          ls -al
          PATH=$PATH:/home/runner/acmhome;export PATH
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO }}
          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
        run: | 
          echo "$ACM_SECRET" > /home/runner/acmconfig/keys.yaml
          echo "$ACM_SECOND" > /usr/acm/keys/adminAccounts/keys.yaml
      - name: Setup On
        shell: bash
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          sudo mkdir /home/runner/testdir
          sudo chown runner:runner /home/runner/testdir
          cd /home/runner/testdir
          echo 'About to setup on'
          acm setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-custom.git
          echo "........................About to ls -al "
          ls -al 
      - shell: bash
        name: Run platform on
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          echo ".................about to run e2e test"
          acm platform on
      - shell: bash
        name: Run platform off
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          echo ".................about to run e2e test"
          acm platform off
      - name: Setup Off
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          echo '........................About to setup off'
          acm setup off
          echo "........................About to ls -al"
          ls -al
      - shell: bash
        name: Delete Secrets
        run: |
          rm /home/runner/acmconfig/keys.yaml
  e2e-tests-linux-terraform-packer:
    needs: [release-linux-prerelease-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureUbuntuAgent
        uses: ./.github/actions/ubuntu-provisioner
      - shell: bash
        name: Download and extract Release
        env:
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          vers="linux-"$VERSION
          repoWithToken="https://"$GH_TOKEN"@github.com/AgileCloudInstitute/AgileCloudManager"
          echo "About to download release"
          gh release download $vers --archive tar.gz --repo $repoWithToken
          mkdir /home/runner/acmhome
          sudo chown runner:runner /home/runner/acmhome
          folderName="AgileCloudManager-"$vers
          tarName=$folderName".tar.gz"
          tar -xvf $tarName
          folderNameSlash=$folderName"/*"
          rm $tarName
          cp -r $folderNameSlash /home/runner/acmhome/
          cd /home/runner/acmhome
          echo "About to list contents of /home/runner/acmhome after untar"
          ls -al
          PATH=$PATH:/home/runner/acmhome;export PATH
      - name: Put secrets in file
        shell: bash
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO }}
          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
        run: | 
          echo "$ACM_SECRET" > /home/runner/acmconfig/keys.yaml
          echo "$ACM_SECOND" > /usr/acm/keys/adminAccounts/keys.yaml
      - name: Setup On
        shell: bash
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          sudo mkdir /home/runner/testdir
          sudo chown runner:runner /home/runner/testdir
          cd /home/runner/testdir
          echo 'About to setup on'
          acm setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-terraform-packer.git
          echo "........................About to ls -al "
          ls -al 
      - shell: bash
        name: Run tfbackend serviceType on
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          acm serviceType on systemName=tfbackend serviceType=tfBackend
      - shell: bash
        name: Run tfbackend serviceType off
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          acm serviceType off systemName=tfbackend serviceType=tfBackend
      - shell: bash
        name: Run tfbackend serviceInstance on
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          acm serviceInstance on systemName=tfbackend serviceType=tfBackend serviceInstance=adminAccounts
      - shell: bash
        name: Run tfbackend serviceInstance off
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          acm serviceInstance off systemName=tfbackend serviceType=tfBackend serviceInstance=adminAccounts
      - shell: bash
        name: Run tfbackend services on
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          acm services on systemName=tfbackend
      - shell: bash
        name: Run admin foundation on
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          acm foundation on systemName=admin
      - shell: bash
        name: Run admin services on
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          acm services on systemName=admin
      - shell: bash
        name: Run agents foundation on
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          acm foundation on systemName=agents
      - shell: bash
        name: Run agents services on
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          acm services on systemName=agents
      - shell: bash
        name: Run agents services off
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          acm services off systemName=agents
      - shell: bash
        name: Run agents foundation off
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          acm foundation off systemName=agents
      - shell: bash
        name: Run admin services off
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          acm services off systemName=admin
      - shell: bash
        name: Run admin foundation off
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          acm foundation off systemName=admin
      - shell: bash
        name: Run tfbackend services off
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          acm services off systemName=tfbackend
      - name: Setup Off
        run: |
          PATH=$PATH:/home/runner/acmhome;export PATH
          cd /home/runner/testdir
          echo '........................About to setup off'
          acm setup off
          echo "........................About to ls -al"
          ls -al
      - shell: bash
        name: Delete Secrets
        run: |
          rm /home/runner/acmconfig/keys.yaml
  e2e-tests-windows-arm:
    needs: [release-windows-prerelease-version, e2e-tests-linux-terraform-packer, e2e-tests-linux-custom, e2e-tests-linux-cloudformation, e2e-tests-linux-arm]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent 
        uses: ./.github/actions/windows-provisioner
      - shell: pwsh
        name: Download and extract Release
        env:
          DESCRIPTION: ${{ inputs.description }}
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          $vers="windows-"+$env:VERSION
          $repoWithToken = '"https://"+$env:GH_TOKEN+"@github.com/AgileCloudInstitute/AgileCloudManager"'
          echo "About to list releases"
          gh release list --repo $repoWithToken
          echo "About to download and extract release"
          mkdir staging
          gh release download $vers --archive tar.gz --repo $repoWithToken
          echo "About to dir after download: "
          dir
          $folderName="AgileCloudManager-"+$vers
          $tarName=$folderName+".tar.gz"
          tar -xvf $tarName -C staging
          $stagingFolderName="staging\\"+$folderName
          $sourceFolderName="staging\\"+$folderName+"\\*"
          echo "About to dir staging"
          dir staging
          echo "About to dir stagingFolderName "
          dir $stagingFolderName
          Copy-Item -Path $sourceFolderName -Recurse -Destination C:\\Users\\runneradmin\\acmhome\\ -Verbose
          echo "About to dir C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\Users\\runneradmin\\acmhome\\
          dir 
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO }}
          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acmconfig\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
          #Import second secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECOND'])
      - name: Run setup on
        run: |
          $env:Path = "C:\\hostedtoolcache\\windows\\Python\\3.10.7\\x64\\Scripts\\;" + $env:Path
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo 'About to: acm setup on'
          acm setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-arm.git
          echo "About to dir"
          dir
      - name: Run platform on
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm platform on
      - name: Run platform off
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm platform off
      - name: Setup Off
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run setup off"
          acm setup off
          echo "About to dir"
          dir
      - name: Delete Secrets
        run: |
          del "C:\\Users\\runneradmin\\acmconfig\\keys.yaml"
          del 'C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml'
  e2e-tests-windows-cloudformation:
    needs: [release-windows-prerelease-version, e2e-tests-linux-terraform-packer, e2e-tests-linux-custom, e2e-tests-linux-cloudformation, e2e-tests-linux-arm]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - shell: pwsh
        name: Download and extract Release
        env:
          DESCRIPTION: ${{ inputs.description }}
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          $vers="windows-"+$env:VERSION
          $repoWithToken = '"https://"+$env:GH_TOKEN+"@github.com/AgileCloudInstitute/AgileCloudManager"'
          echo "About to download release"
          gh release download $vers --archive zip --repo $repoWithToken
          $zipName="AgileCloudManager-"+$vers+".zip"
          mkdir staging
          Expand-Archive $zipName -DestinationPath "staging"
          $folderName="AgileCloudManager-"+$vers
          $stagingFolderName="staging\\"+$folderName
          $sourceFolderName="staging\\"+$folderName+"\\*"
          Copy-Item -Path $sourceFolderName -Recurse -Destination C:\\Users\\runneradmin\\acmhome\\ -Verbose
          echo "About to dir C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\Users\\runneradmin\\acmhome\\
          dir 
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO }}
          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acmconfig\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
          #Import second secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECOND'])
      - name: Run setup on
        run: |
          $env:Path = "C:\\hostedtoolcache\\windows\\Python\\3.10.7\\x64\\Scripts\\;" + $env:Path
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          python -m pip install --upgrade pip requests
          echo 'About to: acm setup on'
          acm setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-cf.git
          echo "About to dir"
          dir
      - name: Run platform on
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd 'C:\\stgng\\'
          echo ".................about to run e2e test"
          acm platform on
      - name: Run platform off
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm platform off
      - name: Setup Off
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run setup off"
          acm setup off
          echo "About to dir"
          dir
      - name: Delete Secrets
        run: |
          del C:\\Users\\runneradmin\\acmconfig\\keys.yaml
          del C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml
  e2e-tests-windows-custom:
    needs: [release-windows-prerelease-version, e2e-tests-linux-terraform-packer, e2e-tests-linux-custom, e2e-tests-linux-cloudformation, e2e-tests-linux-arm]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - shell: pwsh
        name: Download and extract Release
        env:
          DESCRIPTION: ${{ inputs.description }}
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          $vers="windows-"+$env:VERSION
          $repoWithToken = '"https://"+$env:GH_TOKEN+"@github.com/AgileCloudInstitute/AgileCloudManager"'
          echo "About to download release"
          gh release download $vers --archive zip --repo $repoWithToken
          $zipName="AgileCloudManager-"+$vers+".zip"
          mkdir staging
          Expand-Archive $zipName -DestinationPath "staging"
          $folderName="AgileCloudManager-"+$vers
          $stagingFolderName="staging\\"+$folderName
          $sourceFolderName="staging\\"+$folderName+"\\*"
          Copy-Item -Path $sourceFolderName -Recurse -Destination C:\\Users\\runneradmin\\acmhome\\ -Verbose
          echo "About to dir C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\Users\\runneradmin\\acmhome\\
          dir 
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO }}
          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acmconfig\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
          #Import second secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECOND'])
      - name: Run setup on
        run: |
          $env:Path = "C:\\hostedtoolcache\\windows\\Python\\3.10.7\\x64\\Scripts\\;" + $env:Path
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          python -m pip install --upgrade pip requests
          echo 'About to: acm setup on'
          acm setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-custom.git
          echo "About to dir"
          dir
      - name: Run platform on
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm platform on
      - name: Run platform off
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm platform off
      - name: Setup Off
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run setup off"
          acm setup off
          echo "About to dir"
          dir
      - name: Delete Secrets
        run: |
          del C:\\Users\\runneradmin\\acmconfig\\keys.yaml
          del C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml
  e2e-tests-windows-terraform-packer:
    needs: [release-windows-prerelease-version, e2e-tests-linux-terraform-packer, e2e-tests-linux-custom, e2e-tests-linux-cloudformation, e2e-tests-linux-arm]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - shell: pwsh
        name: Download and extract Release
        env:
          DESCRIPTION: ${{ inputs.description }}
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          $vers="windows-"+$env:VERSION
          $repoWithToken = '"https://"+$env:GH_TOKEN+"@github.com/AgileCloudInstitute/AgileCloudManager"'
          echo "About to download release"
          gh release download $vers --archive zip --repo $repoWithToken
          $zipName="AgileCloudManager-"+$vers+".zip"
          mkdir staging
          Expand-Archive $zipName -DestinationPath "staging"
          $folderName="AgileCloudManager-"+$vers
          $stagingFolderName="staging\\"+$folderName
          $sourceFolderName="staging\\"+$folderName+"\\*"
          Copy-Item -Path $sourceFolderName -Recurse -Destination C:\\Users\\runneradmin\\acmhome\\ -Verbose
          echo "About to dir C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\Users\\runneradmin\\acmhome\\
          dir 
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO }}
          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acmconfig\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
          #Import second secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECOND'])
      - name: Run setup on
        run: |
          $env:Path = "C:\\hostedtoolcache\\windows\\Python\\3.10.7\\x64\\Scripts\\;" + $env:Path
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          python -m pip install --upgrade pip requests
          echo 'About to: acm setup on'
          acm setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-terraform-packer.git
          echo "About to dir"
          dir
      - name: Run tfbackend serviceType on
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm serviceType on systemName=tfbackend serviceType=tfBackend
      - name: Run tfbackend serviceType off
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm serviceType off systemName=tfbackend serviceType=tfBackend
      - name: Run tfbackend serviceInstance on
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm serviceInstance on systemName=tfbackend serviceType=tfBackend serviceInstance=adminAccounts
      - name: Run tfbackend serviceInstance off
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm serviceInstance off systemName=tfbackend serviceType=tfBackend serviceInstance=adminAccounts
      - name: Run tfbackend services on
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm services on systemName=tfbackend
      - name: Run admin foundation on
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm foundation on systemName=admin
      - name: Run admin services on
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm services on systemName=admin
      - name: Run agents foundation on
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm foundation on systemName=agents
      - name: Run agents services on
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm services on systemName=agents
      - name: Run agents services off
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm services off systemName=agents
      - name: Run agents foundation off
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm foundation off systemName=agents
      - name: Run admin services off
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm services off systemName=admin
      - name: Run admin foundation off
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm foundation off systemName=admin
      - name: Run tfbackend services off
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run e2e test"
          acm services off systemName=tfbackend
      - name: Setup Off
        run: |
          $env:Path += ";C:\\Users\\runneradmin\\acmhome\\"
          cd C:\\stgng\\
          echo ".................about to run setup off"
          acm setup off
          echo "About to dir"
          dir
      - name: Delete Secrets
        run: |
          del C:\\Users\\runneradmin\\acmconfig\\keys.yaml
          del C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml
  release-linux-final-version:
    needs: [e2e-tests-linux-terraform-packer, e2e-tests-linux-custom, e2e-tests-linux-cloudformation, e2e-tests-linux-arm, e2e-tests-windows-arm, e2e-tests-windows-cloudformation, e2e-tests-windows-custom, e2e-tests-windows-terraform-packer]
    runs-on: ubuntu-latest
    steps:
      - shell: bash
        name: Final Release
        env:
          DESCRIPTION: ${{ inputs.description }}
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          vers="linux-"$VERSION
          repoWithToken="https://"$GH_TOKEN"@github.com/AgileCloudInstitute/AgileCloudManager.git"
          echo "About to print version"
          echo $vers
          nameOfRelease="AgileCloudManager-"$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          gh release edit $vers --prerelease=false --repo $repoWithToken
          #gh release edit linux-1.1.x --prerelease=false --repo $repoWithToken
  release-windows-final-version:
    needs: [e2e-tests-linux-terraform-packer, e2e-tests-linux-custom, e2e-tests-linux-cloudformation, e2e-tests-linux-arm, e2e-tests-windows-arm, e2e-tests-windows-cloudformation, e2e-tests-windows-custom, e2e-tests-windows-terraform-packer]
    runs-on: windows-latest
    steps:
      - shell: pwsh
        name: Final Release
        env:
          DESCRIPTION: ${{ inputs.description }}
          VERSION: ${{ inputs.version }}
          GH_TOKEN: ${{ secrets.HUSH }}
        run: |
          $vers="windows-"+$env:VERSION
          $repoWithToken = '"https://"+$env:GH_TOKEN+"@github.com/AgileCloudInstitute/AgileCloudManager"'
          echo "About to print version"
          echo $vers
          $nameOfRelease="AgileCloudManager-"+$vers
          echo "About to print name of release"
          echo $nameOfRelease 
          echo "About to create release"
          gh release edit $vers --prerelease=false --repo $repoWithToken
          #gh release edit linux-1.1.x --prerelease=false --repo $repoWithToken
  push-to-master-branch:
    needs: [release-linux-final-version, release-windows-final-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.HUSH }}
      - shell: bash
        name: Push changes to master branch
        run: |
          git config --global user.email "Agile.Cloud.Institute@GreenRiverIT.com"
          git config --global user.name "AgileCloudInstitute"
          #git init
          git remote set-url origin "https://github.com/${GITHUB_REPOSITORY}.git"
          #git branch -M master
          #git add --all
          #git push --force -u origin master
          git fetch --all
          git checkout staging
          git checkout master
          #git merge --allow-unrelated-histories staging
          #git push --force -u origin master
          git push --force origin staging:master
