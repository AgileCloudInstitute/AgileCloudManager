name: dev-environ-tests-windows
on:
  push:
    branches:
      - dev
jobs:
  unit-tests-windows-misc:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO }}
          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acmconfig\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
          #Import second secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECOND'])
      - shell: python
        name: Run setup on
        run: |
          import subprocess
          import os
          os.chdir('D:\\a\\AgileCloudManager\\')
          print('About to: acm setup on')
          mycmd = "python AgileCloudManager\\app\\acm.py setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-cf.git"
          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
          while(True):
            # returns None while subprocess is running
            retcode = p.poll() 
            line = p.stdout.readline()
            print(line)
            if retcode is not None:
              break 
      - shell: python
        name: Run test_command_builder
        run: |
          import os, subprocess
          os.chdir("..")
          print(".................about to run unit test")
          mycmd = "python -m unittest AgileCloudManager.unitTests.test_command_builder"
          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
          while(True):
            # returns None while subprocess is running
            retcode = p.poll() 
            line = p.stdout.readline()
            print(line)
            if retcode is not None:
              break 
      - shell: python
        name: Run test_workflow_and_changes
        run: |
          import os, subprocess
          os.chdir("..")
          print(".................about to run unit test")
          mycmd = "python -m unittest AgileCloudManager.unitTests.test_workflow_and_changes"
          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
          while(True):
            # returns None while subprocess is running
            retcode = p.poll() 
            line = p.stdout.readline()
            print(line)
            if retcode is not None:
              break 
      - shell: python
        name: Run test_controller_custom
        run: |
          import os, subprocess
          os.chdir("..")
          print(".................about to run unit test")
          mycmd = "python -m unittest AgileCloudManager.unitTests.test_controller_custom"
          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
          while(True):
            # returns None while subprocess is running
            retcode = p.poll() 
            line = p.stdout.readline()
            print(line)
            if retcode is not None:
              break 
      - shell: python
        name: Delete Secrets
        run: |
          import os
          try:
            os.remove("C:\\Users\\runneradmin\\acmconfig\\keys.yaml")
          except OSError:
            pass
          try:
            os.remove("C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml")
          except OSError:
            pass
  unit-tests-windows-cloudformation:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO }}
          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acmconfig\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
          #Import second secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECOND'])
      - shell: python
        name: Run setup on
        run: |
          import subprocess
          import os
          os.chdir('D:\\a\\AgileCloudManager\\')
          print('About to: acm setup on')
          mycmd = "python AgileCloudManager\\app\\acm.py setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-cf.git"
          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
          while(True):
            # returns None while subprocess is running
            retcode = p.poll() 
            line = p.stdout.readline()
            print(line)
            if retcode is not None:
              break 
      - shell: python
        name: Run test_controller_cf
        run: |
          import os, subprocess
          os.chdir("..")
          print(".................about to run unit test")
          mycmd = "python -m unittest AgileCloudManager.unitTests.test_controller_cf"
          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
          while(True):
            # returns None while subprocess is running
            retcode = p.poll() 
            line = p.stdout.readline()
            print(line)
            if retcode is not None:
              break 
      - shell: python
        name: Delete Secrets
        run: |
          import os
          try:
            os.remove("C:\\Users\\runneradmin\\acmconfig\\keys.yaml")
          except OSError:
            pass
          try:
            os.remove("C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml")
          except OSError:
            pass
  unit-tests-windows-terraform-packer:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO }}
          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acmconfig\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
          #Import second secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECOND'])
      - shell: python
        name: Run setup on
        run: |
          import subprocess
          import os
          os.chdir('D:\\a\\AgileCloudManager\\')
          print('About to: acm setup on')
          mycmd = "python AgileCloudManager\\app\\acm.py setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-terraform-packer.git"
          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
          while(True):
            # returns None while subprocess is running
            retcode = p.poll() 
            line = p.stdout.readline()
            print(line)
            if retcode is not None:
              break 
      - shell: python
        name: Run test_controller_terraform_and_packer_one
        run: |
          import os, subprocess
          os.chdir("..")
          print(".................about to run unit test")
          mycmd = "python -m unittest AgileCloudManager.unitTests.test_controller_terraform_and_packer_one"
          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
          while(True):
            # returns None while subprocess is running
            retcode = p.poll() 
            line = p.stdout.readline()
            print(line)
            if retcode is not None:
              break 
      - shell: python
        name: Run test_controller_terraform_and_packer_two
        run: |
          import os, subprocess
          os.chdir("..")
          print(".................about to run unit test")
          mycmd = "python -m unittest AgileCloudManager.unitTests.test_controller_terraform_and_packer_two"
          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
          while(True):
            # returns None while subprocess is running
            retcode = p.poll() 
            line = p.stdout.readline()
            print(line)
            if retcode is not None:
              break 
      - shell: python
        name: Delete Secrets
        run: |
          import os
          try:
            os.remove("C:\\Users\\runneradmin\\acmconfig\\keys.yaml")
          except OSError:
            pass
          try:
            os.remove("C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml")
          except OSError:
            pass
  unit-tests-windows-arm-template:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - id: ConfigureWindowsAgent
        uses: ./.github/actions/windows-provisioner
      - shell: python
        name: Save secrets to file
        env:
          ACM_SECRET: ${{ secrets.ACM_REPO }}
          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
        run: |
          import base64, subprocess, sys, os, pathlib
          #Import first secrets file
          with open('C:\\Users\\runneradmin\\acmconfig\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECRET'])
          #Import second secrets file
          with open('C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml', 'w') as key_file:
            key_file.write(os.environ['ACM_SECOND'])
      - shell: python
        name: Run setup on
        run: |
          import subprocess
          import os
          os.chdir('D:\\a\\AgileCloudManager\\')
          print('About to: acm setup on')
          mycmd = "python AgileCloudManager\\app\\acm.py setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-arm.git"
          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
          while(True):
            # returns None while subprocess is running
            retcode = p.poll() 
            line = p.stdout.readline()
            print(line)
            if retcode is not None:
              break 
      - shell: python
        name: Run test_controller_arm
        run: |
          import os, subprocess
          os.chdir("..")
          print(".................about to run unit test")
          mycmd = "python -m unittest AgileCloudManager.unitTests.test_controller_arm"
          p = subprocess.Popen(mycmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
          while(True):
            # returns None while subprocess is running
            retcode = p.poll() 
            line = p.stdout.readline()
            print(line)
            if retcode is not None:
              break 
      - shell: python
        name: Delete Secrets
        run: |
          import os
          try:
            os.remove("C:\\Users\\runneradmin\\acmconfig\\keys.yaml")
          except OSError:
            pass
          try:
            os.remove("C:\\Users\\runneradmin\\acm\\keys\\adminAccounts\\keys.yaml")
          except OSError:
            pass
  create-exe-and-upload-artifact:
    needs: [unit-tests-windows-misc, unit-tests-windows-cloudformation, unit-tests-windows-terraform-packer, unit-tests-windows-arm-template]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - shell: python
        name: Create exe and add exe to PATH
        run: |
          import os, subprocess, sys
          subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
          #pip install -U pyinstaller
          os.chdir('app')
          os.remove("__init__.py")
          print("About to: pyinstaller acm.py")
          output = subprocess.getoutput("pyinstaller acm.py")
          print(output)
          print("About to: tar -cvf acm_build.tar dist/acm")
          output = subprocess.getoutput("tar -cvf acm_build.tar dist/acm")
          print(output)          
          print("About to: dir 'D:\\a\\AgileCloudManager\\AgileCloudManager\\app\\'")
          output = subprocess.getoutput("dir D:\\\\a\\\AgileCloudManager\\\AgileCloudManager\\\\app\\")
          print(output)
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: acm-artifact
          path: D:\\a\\AgileCloudManager\\AgileCloudManager\\app\\acm_build.tar
          retention-days: 1
#          path: /home/runner/work/AgileCloudManager/AgileCloudManager/app/acm_build.tar
#  e2e-tests-linux-arm:
#    needs: [create-exe-and-upload-artifact]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: acm-artifact
#      - name: Display structure of downloaded files
#        run: |
#          mkdir /home/runner/acmhome
#          sudo chown runner:runner /home/runner/acmhome
#          mv acm_build.tar /home/runner/acmhome
#          cd /home/runner/acmhome
#          tar -xvf acm_build.tar
#          rm acm_build.tar
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          #cd dist/acm
#          #echo "-------------------------About to ls -al current directory "
#          #ls -al
#          #sudo cp -R . /usr/local/bin/. 
#          #sudo chown -R runner:runner /usr/local/bin
#          #echo ".........................About to ls -al /usr/local/bin"
#          #ls -al /usr/local/bin
#          #cd ../..
#          #rm -rf dist
#      - shell: bash
#        name: Configure agent
#        env:
#          ACM_SECRET: ${{ secrets.ACM_REPO }}
#          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
#        run: |
#          az extension add --name resource-graph
#          echo "Current working directory is: "
#          pwd
#          mkdir /home/runner/keys
#          mkdir /home/runner/keys/starter
#          mkdir /home/runner/acmconfig/
#          echo "$ACM_SECRET" > /home/runner/acmconfig/keys.yaml
#          sudo mkdir /var/log/acm
#          sudo chown -R runner:runner /var/log/acm
#          sudo mkdir /opt/acm
#          sudo chown -R runner:runner /opt/acm
#          sudo mkdir /usr/acm
#          sudo mkdir /usr/acm/keys
#          sudo mkdir /usr/acm/keys/adminAccounts
#          sudo chown -R runner:runner /usr/acm
#          echo "$ACM_SECOND" > /usr/acm/keys/adminAccounts/keys.yaml
#          sudo chown -R runner:runner /usr/acm
#          echo 'new------------------'
#          #git --version
#          sudo apt install -y dos2unix
#          ## Install Terraform
#          cd /home/runner
#          mkdir terraform-download
#          cd terraform-download
#          wget https://releases.hashicorp.com/terraform/0.12.24/terraform_0.12.24_linux_amd64.zip
#          unzip terraform_0.12.24_linux_amd64.zip
#          #Move the terraform binary into a folder that is listed as part of the PATH variable.  
#          mv terraform /usr/local/bin/
#          echo 'and---------------------------------'
#          cd /home/runner
#          sudo apt -y install ansible
#          aws --version
#          pip3 install requests
#          pip3 install pyyaml
#          pip3 install IPy
#          python3 --version
#          python --version
#          #Cause the ansible configuration to be owned by the agent user so that pipelines can change things like hosts file, etc.  
#          sudo chown -R runner:runner /opt/pipx_bin/ansible
#          echo 'then--------------------------------'
#          sudo apt update && sudo apt upgrade
#          sudo apt clean
#      - name: Setup On
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          sudo mkdir /home/runner/testdir
#          sudo chown runner:runner /home/runner/testdir
#          cd /home/runner/testdir
#          echo 'About to setup on'
#          acm setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-arm.git
#          echo "........................About to ls -al "
#          ls -al 
#      - shell: bash
#        name: Run platform on
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          echo ".................about to run e2e test"
#          acm platform on
#      - shell: bash
#        name: Run platform off
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          echo ".................about to run e2e test"
#          acm platform off
#      - name: Setup Off
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          echo '........................About to setup off'
#          acm setup off
#          echo "........................About to ls -al"
#          ls -al
#      - shell: bash
#        name: Delete Secrets
#        run: |
#          rm /home/runner/acmconfig/keys.yaml
#  e2e-tests-linux-cloudformation:
#    needs: [create-exe-and-upload-artifact]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: acm-artifact
#      - name: Display structure of downloaded files
#        run: |
#          mkdir /home/runner/acmhome
#          sudo chown runner:runner /home/runner/acmhome
#          mv acm_build.tar /home/runner/acmhome
#          cd /home/runner/acmhome
#          tar -xvf acm_build.tar
#          rm acm_build.tar
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          #/////
#          #tar -xvf acm_build.tar
#          #rm acm_build.tar
#          #cd dist/acm
#          #echo "-------------------------About to ls -al current directory "
#          #ls -al
#          #sudo cp -R . /usr/local/bin/. 
#          #sudo chown -R runner:runner /usr/local/bin
#          #echo ".........................About to ls -al /usr/local/bin"
#          #ls -al /usr/local/bin
#          #cd ../..
#          #rm -rf dist
#      - shell: bash
#        name: Configure agent
#        env:
#          ACM_SECRET: ${{ secrets.ACM_REPO }}
#          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
#        run: |
#          az extension add --name resource-graph
#          echo "Current working directory is: "
#          pwd
#          mkdir /home/runner/keys
#          mkdir /home/runner/keys/starter
#          mkdir /home/runner/acmconfig/
#          echo "$ACM_SECRET" > /home/runner/acmconfig/keys.yaml
#          sudo mkdir /var/log/acm
#          sudo chown -R runner:runner /var/log/acm
#          sudo mkdir /opt/acm
#          sudo chown -R runner:runner /opt/acm
#          sudo mkdir /usr/acm
#          sudo mkdir /usr/acm/keys
#          sudo mkdir /usr/acm/keys/adminAccounts
#          sudo chown -R runner:runner /usr/acm
#          echo "$ACM_SECOND" > /usr/acm/keys/adminAccounts/keys.yaml
#          sudo chown -R runner:runner /usr/acm
#          echo 'new------------------'
#          #git --version
#          sudo apt install -y dos2unix
#          ## Install Terraform
#          cd /home/runner
#          mkdir terraform-download
#          cd terraform-download
#          wget https://releases.hashicorp.com/terraform/0.12.24/terraform_0.12.24_linux_amd64.zip
#          unzip terraform_0.12.24_linux_amd64.zip
#          #Move the terraform binary into a folder that is listed as part of the PATH variable.  
#          mv terraform /usr/local/bin/
#          echo 'and---------------------------------'
#          cd /home/runner
#          sudo apt -y install ansible
#          aws --version
#          pip3 install requests
#          pip3 install pyyaml
#          pip3 install IPy
#          python3 --version
#          python --version
#          #Cause the ansible configuration to be owned by the agent user so that pipelines can change things like hosts file, etc.  
#          sudo chown -R runner:runner /opt/pipx_bin/ansible
#          echo 'then--------------------------------'
#          sudo apt update && sudo apt upgrade
#          sudo apt clean
#      - name: Setup On
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          sudo mkdir /home/runner/testdir
#          sudo chown runner:runner /home/runner/testdir
#          cd /home/runner/testdir
#          echo 'About to setup on'
#          acm setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-projects-cf.git
#          echo "........................About to ls -al "
#          ls -al 
#      - shell: bash
#        name: Run platform on
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          echo ".................about to run e2e test"
#          acm platform on
#      - shell: bash
#        name: Run platform off
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          echo ".................about to run e2e test"
#          acm platform off
#      - name: Setup Off
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          echo '........................About to setup off'
#          acm setup off
#          echo "........................About to ls -al"
#          ls -al
#      - shell: bash
#        name: Delete Secrets
#        run: |
#          rm /home/runner/acmconfig/keys.yaml
#  e2e-tests-linux-custom:
#    needs: [create-exe-and-upload-artifact]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: acm-artifact
#      - name: Display structure of downloaded files
#        run: |
#          mkdir /home/runner/acmhome
#          sudo chown runner:runner /home/runner/acmhome
#          mv acm_build.tar /home/runner/acmhome
#          cd /home/runner/acmhome
#          tar -xvf acm_build.tar
#          rm acm_build.tar
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          #////////////////
#          #tar -xvf acm_build.tar
#          #rm acm_build.tar
#          #cd dist/acm
#          #echo "-------------------------About to ls -al current directory "
#          #ls -al
#          #sudo cp -R . /usr/local/bin/. 
#          #sudo chown -R runner:runner /usr/local/bin
#          #echo ".........................About to ls -al /usr/local/bin"
#          #ls -al /usr/local/bin
#          #cd ../..
#          #rm -rf dist
#      - shell: bash
#        name: Configure agent
#        env:
#          ACM_SECRET: ${{ secrets.ACM_REPO }}
#          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
#        run: |
#          az extension add --name resource-graph
#          echo "Current working directory is: "
#          pwd
#          mkdir /home/runner/keys
#          mkdir /home/runner/keys/starter
#          mkdir /home/runner/acmconfig/
#          echo "$ACM_SECRET" > /home/runner/acmconfig/keys.yaml
#          sudo mkdir /var/log/acm
#          sudo chown -R runner:runner /var/log/acm
#          sudo mkdir /opt/acm
#          sudo chown -R runner:runner /opt/acm
#          sudo mkdir /usr/acm
#          sudo mkdir /usr/acm/keys
#          sudo mkdir /usr/acm/keys/adminAccounts
#          sudo chown -R runner:runner /usr/acm
#          echo "$ACM_SECOND" > /usr/acm/keys/adminAccounts/keys.yaml
#          sudo chown -R runner:runner /usr/acm
#          echo 'new------------------'
#          #git --version
#          sudo apt install -y dos2unix
#          ## Install Terraform
#          cd /home/runner
#          mkdir terraform-download
#          cd terraform-download
#          wget https://releases.hashicorp.com/terraform/0.12.24/terraform_0.12.24_linux_amd64.zip
#          unzip terraform_0.12.24_linux_amd64.zip
#          #Move the terraform binary into a folder that is listed as part of the PATH variable.  
#          mv terraform /usr/local/bin/
#          echo 'and---------------------------------'
#          cd /home/runner
#          sudo apt -y install ansible
#          aws --version
#          pip3 install requests
#          pip3 install pyyaml
#          pip3 install IPy
#          python3 --version
#          python --version
#          #Cause the ansible configuration to be owned by the agent user so that pipelines can change things like hosts file, etc.  
#          sudo chown -R runner:runner /opt/pipx_bin/ansible
#          echo 'then--------------------------------'
#          sudo apt update && sudo apt upgrade
#          sudo apt clean
#      - name: Setup On
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          sudo mkdir /home/runner/testdir
#          sudo chown runner:runner /home/runner/testdir
#          cd /home/runner/testdir
#          echo 'About to setup on'
#          acm setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-custom.git
#          echo "........................About to ls -al "
#          ls -al 
#      - shell: bash
#        name: Run platform on
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          echo ".................about to run e2e test"
#          acm platform on
#      - shell: bash
#        name: Run platform off
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          echo ".................about to run e2e test"
#          acm platform off
#      - name: Setup Off
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          echo '........................About to setup off'
#          acm setup off
#          echo "........................About to ls -al"
#          ls -al
#      - shell: bash
#        name: Delete Secrets
#        run: |
#          rm /home/runner/acmconfig/keys.yaml
#  e2e-tests-linux-terraform-packer:
#    needs: [create-exe-and-upload-artifact]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: acm-artifact
#      - name: Display structure of downloaded files
#        run: |
#          mkdir /home/runner/acmhome
#          sudo chown runner:runner /home/runner/acmhome
#          mv acm_build.tar /home/runner/acmhome
#          cd /home/runner/acmhome
#          tar -xvf acm_build.tar
#          rm acm_build.tar
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          #/////////////
#          #tar -xvf acm_build.tar
#          #rm acm_build.tar
#          #cd dist/acm
#          #echo "-------------------------About to ls -al current directory "
#          #ls -al
#          #sudo cp -R . /usr/local/bin/. 
#          #sudo chown -R runner:runner /usr/local/bin
#          #echo ".........................About to ls -al /usr/local/bin"
#          #ls -al /usr/local/bin
#          #cd ../..
#          #rm -rf dist
#      - shell: bash
#        name: Configure agent
#        env:
#          ACM_SECRET: ${{ secrets.ACM_REPO }}
#          ACM_SECOND: ${{ secrets.ACM_REPO_SECOND }}
#        run: |
#          az extension add --name resource-graph
#          echo "Current working directory is: "
#          pwd
#          mkdir /home/runner/keys
#          mkdir /home/runner/keys/starter
#          mkdir /home/runner/acmconfig/
#          echo "$ACM_SECRET" > /home/runner/acmconfig/keys.yaml
#          sudo mkdir /var/log/acm
#          sudo chown -R runner:runner /var/log/acm
#          sudo mkdir /opt/acm
#          sudo chown -R runner:runner /opt/acm
#          sudo mkdir /usr/acm
#          sudo mkdir /usr/acm/keys
#          sudo mkdir /usr/acm/keys/adminAccounts
#          sudo chown -R runner:runner /usr/acm
#          echo "$ACM_SECOND" > /usr/acm/keys/adminAccounts/keys.yaml
#          sudo chown -R runner:runner /usr/acm
#          echo 'new------------------'
#          #git --version
#          sudo apt install -y dos2unix
#          ## Install Terraform
#          cd /home/runner
#          mkdir terraform-download
#          cd terraform-download
#          wget https://releases.hashicorp.com/terraform/0.12.24/terraform_0.12.24_linux_amd64.zip
#          unzip terraform_0.12.24_linux_amd64.zip
#          #Move the terraform binary into a folder that is listed as part of the PATH variable.  
#          mv terraform /usr/local/bin/
#          echo 'and---------------------------------'
#          cd /home/runner
#          sudo apt -y install ansible
#          aws --version
#          pip3 install requests
#          pip3 install pyyaml
#          pip3 install IPy
#          python3 --version
#          python --version
#          #Cause the ansible configuration to be owned by the agent user so that pipelines can change things like hosts file, etc.  
#          sudo chown -R runner:runner /opt/pipx_bin/ansible
#          echo 'then--------------------------------'
#          sudo apt update && sudo apt upgrade
#          sudo apt clean
#      - name: Setup On
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          sudo mkdir /home/runner/testdir
#          sudo chown runner:runner /home/runner/testdir
#          cd /home/runner/testdir
#          echo 'About to setup on'
#          acm setup on sourceRepo=https://github.com/AgileCloudInstitute/acm-config-terraform-packer.git
#          echo "........................About to ls -al "
#          ls -al 
#      - shell: bash
#        name: Run tfbackend serviceType on
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          acm serviceType on systemName=tfbackend serviceType=tfBackend
#      - shell: bash
#        name: Run tfbackend serviceType off
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          acm serviceType off systemName=tfbackend serviceType=tfBackend
#      - shell: bash
#        name: Run tfbackend serviceInstance on
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          acm serviceInstance on systemName=tfbackend serviceType=tfBackend serviceInstance=adminAccounts
#      - shell: bash
#        name: Run tfbackend serviceInstance off
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          acm serviceInstance off systemName=tfbackend serviceType=tfBackend serviceInstance=adminAccounts
#      - shell: bash
#        name: Run tfbackend services on
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          acm services on systemName=tfbackend
#      - shell: bash
#        name: Run admin foundation on
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          acm foundation on systemName=admin
#      - shell: bash
#        name: Run admin services on
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          acm services on systemName=admin
#      - shell: bash
#        name: Run agents foundation on
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          acm foundation on systemName=agents
#      - shell: bash
#        name: Run agents services on
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          acm services on systemName=agents
#      - shell: bash
#        name: Run agents services off
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          acm services off systemName=agents
#      - shell: bash
#        name: Run agents foundation off
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          acm foundation off systemName=agents
#      - shell: bash
#        name: Run admin services off
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          acm services off systemName=admin
#      - shell: bash
#        name: Run admin foundation off
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          acm foundation off systemName=admin
#      - shell: bash
#        name: Run tfbackend services off
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          acm services off systemName=tfbackend
#      - name: Setup Off
#        run: |
#          PATH=$PATH:/home/runner/acmhome/dist/acm;export PATH
#          cd /home/runner/testdir
#          echo '........................About to setup off'
#          acm setup off
#          echo "........................About to ls -al"
#          ls -al
#      - shell: bash
#        name: Delete Secrets
#        run: |
#          rm /home/runner/acmconfig/keys.yaml
#  push-to-test-branch:
#    needs: [e2e-tests-linux-arm, e2e-tests-linux-cloudformation, e2e-tests-linux-custom, e2e-tests-linux-terraform-packer ]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - shell: bash
#        name: Push changes to test branch
#        env:
#          GIT_PAT: ${{ secrets.HUSH }}
#        run: |
#          repoWithToken="https://"$GIT_PAT"@github.com/AgileCloudInstitute/AgileCloudManager.git"
#          git config --global user.email "Agile.Cloud.Institute@GreenRiverIT.com"
#          git config --global user.name "AgileCloudInstitute"
#          git init
#          git remote set-url origin $repoWithToken
#          git branch -M test
#          git add --all
#          git push --force -u origin test
